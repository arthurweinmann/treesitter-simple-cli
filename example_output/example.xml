<source_file position="([0, 0] - [368, 0]">
  <inner_attribute_item position="([0, 0] - [0, 64]">#![
    <attribute position="([0, 3] - [0, 63]">
      <identifier position="([0, 3] - [0, 11]">cfg_attr</identifier>

      <token_tree type="arguments" position="([0, 11] - [0, 63]">(
        <identifier position="([0, 12] - [0, 28]">debug_assertions</identifier>

        <identifier position="([0, 30] - [0, 35]">allow</identifier>

        <token_tree position="([0, 35] - [0, 62]">(
          <identifier position="([0, 36] - [0, 45]">dead_code</identifier>

          <identifier position="([0, 47] - [0, 61]">unused_imports</identifier>
)</token_tree>
)</token_tree>
</attribute>
]</inner_attribute_item>

  <use_declaration position="([1, 0] - [1, 21]">use
    <scoped_identifier type="argument" position="([1, 4] - [1, 20]">
      <identifier type="path" position="([1, 4] - [1, 14]">serde_json</identifier>
::
      <identifier type="name" position="([1, 16] - [1, 20]">json</identifier>
</scoped_identifier>
;</use_declaration>

  <use_declaration position="([2, 0] - [2, 13]">use
    <scoped_identifier type="argument" position="([2, 4] - [2, 12]">
      <identifier type="path" position="([2, 4] - [2, 7]">std</identifier>
::
      <identifier type="name" position="([2, 9] - [2, 12]">env</identifier>
</scoped_identifier>
;</use_declaration>

  <use_declaration position="([3, 0] - [3, 20]">use
    <scoped_identifier type="argument" position="([3, 4] - [3, 19]">
      <scoped_identifier type="path" position="([3, 4] - [3, 12]">
        <identifier type="path" position="([3, 4] - [3, 7]">std</identifier>
::
        <identifier type="name" position="([3, 9] - [3, 12]">fmt</identifier>
</scoped_identifier>
::
      <identifier type="name" position="([3, 14] - [3, 19]">Debug</identifier>
</scoped_identifier>
;</use_declaration>

  <use_declaration position="([4, 0] - [4, 12]">use
    <scoped_identifier type="argument" position="([4, 4] - [4, 11]">
      <identifier type="path" position="([4, 4] - [4, 7]">std</identifier>
::
      <identifier type="name" position="([4, 9] - [4, 11]">fs</identifier>
</scoped_identifier>
;</use_declaration>

  <use_declaration position="([5, 0] - [5, 12]">use
    <scoped_identifier type="argument" position="([5, 4] - [5, 11]">
      <identifier type="path" position="([5, 4] - [5, 7]">std</identifier>
::
      <identifier type="name" position="([5, 9] - [5, 11]">io</identifier>
</scoped_identifier>
;</use_declaration>

  <use_declaration position="([6, 0] - [6, 19]">use
    <scoped_identifier type="argument" position="([6, 4] - [6, 18]">
      <scoped_identifier type="path" position="([6, 4] - [6, 11]">
        <identifier type="path" position="([6, 4] - [6, 7]">std</identifier>
::
        <identifier type="name" position="([6, 9] - [6, 11]">io</identifier>
</scoped_identifier>
::
      <identifier type="name" position="([6, 13] - [6, 18]">Write</identifier>
</scoped_identifier>
;</use_declaration>

  <use_declaration position="([7, 0] - [7, 20]">use
    <scoped_identifier type="argument" position="([7, 4] - [7, 19]">
      <scoped_identifier type="path" position="([7, 4] - [7, 13]">
        <identifier type="path" position="([7, 4] - [7, 7]">std</identifier>
::
        <identifier type="name" position="([7, 9] - [7, 13]">path</identifier>
</scoped_identifier>
::
      <identifier type="name" position="([7, 15] - [7, 19]">Path</identifier>
</scoped_identifier>
;</use_declaration>

  <use_declaration position="([8, 0] - [8, 17]">use
    <scoped_identifier type="argument" position="([8, 4] - [8, 16]">
      <identifier type="path" position="([8, 4] - [8, 7]">std</identifier>
::
      <identifier type="name" position="([8, 9] - [8, 16]">process</identifier>
</scoped_identifier>
;</use_declaration>

  <use_declaration position="([9, 0] - [9, 35]">use
    <scoped_identifier type="argument" position="([9, 4] - [9, 34]">
      <scoped_identifier type="path" position="([9, 4] - [9, 21]">
        <scoped_identifier type="path" position="([9, 4] - [9, 13]">
          <identifier type="path" position="([9, 4] - [9, 7]">std</identifier>
::
          <identifier type="name" position="([9, 9] - [9, 13]">sync</identifier>
</scoped_identifier>
::
        <identifier type="name" position="([9, 15] - [9, 21]">atomic</identifier>
</scoped_identifier>
::
      <identifier type="name" position="([9, 23] - [9, 34]">AtomicUsize</identifier>
</scoped_identifier>
;</use_declaration>

  <use_declaration position="([10, 0] - [10, 23]">use
    <scoped_identifier type="argument" position="([10, 4] - [10, 22]">
      <scoped_identifier type="path" position="([10, 4] - [10, 13]">
        <identifier type="path" position="([10, 4] - [10, 7]">std</identifier>
::
        <identifier type="name" position="([10, 9] - [10, 13]">time</identifier>
</scoped_identifier>
::
      <identifier type="name" position="([10, 15] - [10, 22]">Instant</identifier>
</scoped_identifier>
;</use_declaration>

  <use_declaration position="([11, 0] - [11, 22]">use
    <scoped_use_list type="argument" position="([11, 4] - [11, 21]">
      <identifier type="path" position="([11, 4] - [11, 7]">std</identifier>
::
      <use_list type="list" position="([11, 9] - [11, 21]">{
        <identifier position="([11, 10] - [11, 13]">fmt</identifier>
,
        <identifier position="([11, 15] - [11, 20]">usize</identifier>
}</use_list>
</scoped_use_list>
;</use_declaration>

  <use_declaration position="([12, 0] - [12, 69]">use
    <scoped_use_list type="argument" position="([12, 4] - [12, 68]">
      <identifier type="path" position="([12, 4] - [12, 15]">tree_sitter</identifier>
::
      <use_list type="list" position="([12, 17] - [12, 68]">{
        <identifier position="([12, 18] - [12, 27]">InputEdit</identifier>
,
        <identifier position="([12, 29] - [12, 37]">Language</identifier>
,
        <identifier position="([12, 39] - [12, 46]">LogType</identifier>
,
        <identifier position="([12, 48] - [12, 54]">Parser</identifier>
,
        <identifier position="([12, 56] - [12, 61]">Point</identifier>
,
        <identifier position="([12, 63] - [12, 67]">Tree</identifier>
}</use_list>
</scoped_use_list>
;</use_declaration>

  <function_item position="([14, 0] - [17, 1]">fn
    <identifier type="name" position="([14, 3] - [14, 12]">read_file</identifier>

    <parameters type="parameters" position="([14, 12] - [14, 24]">(
      <parameter position="([14, 13] - [14, 23]">
        <identifier type="pattern" position="([14, 13] - [14, 17]">path</identifier>
:
        <reference_type type="type" position="([14, 19] - [14, 23]">&amp;
          <primitive_type type="type" position="([14, 20] - [14, 23]">str</primitive_type>
</reference_type>
</parameter>
)</parameters>
-&gt;
    <generic_type type="return_type" position="([14, 28] - [14, 47]">
      <scoped_type_identifier type="type" position="([14, 28] - [14, 38]">
        <identifier type="path" position="([14, 28] - [14, 30]">io</identifier>
::
        <type_identifier type="name" position="([14, 32] - [14, 38]">Result</type_identifier>
</scoped_type_identifier>

      <type_arguments type="type_arguments" position="([14, 38] - [14, 47]">&lt;
        <generic_type position="([14, 39] - [14, 46]">
          <type_identifier type="type" position="([14, 39] - [14, 42]">Vec</type_identifier>

          <type_arguments type="type_arguments" position="([14, 42] - [14, 46]">&lt;
            <primitive_type position="([14, 43] - [14, 45]">u8</primitive_type>
&gt;</type_arguments>
</generic_type>
&gt;</type_arguments>
</generic_type>

    <block type="body" position="([14, 48] - [17, 1]">{
      <let_declaration position="([15, 4] - [15, 44]">let
        <identifier type="pattern" position="([15, 8] - [15, 16]">contents</identifier>
:
        <generic_type type="type" position="([15, 18] - [15, 25]">
          <type_identifier type="type" position="([15, 18] - [15, 21]">Vec</type_identifier>

          <type_arguments type="type_arguments" position="([15, 21] - [15, 25]">&lt;
            <primitive_type position="([15, 22] - [15, 24]">u8</primitive_type>
&gt;</type_arguments>
</generic_type>
=
        <try_expression type="value" position="([15, 28] - [15, 43]">
          <call_expression position="([15, 28] - [15, 42]">
            <scoped_identifier type="function" position="([15, 28] - [15, 36]">
              <identifier type="path" position="([15, 28] - [15, 30]">fs</identifier>
::
              <identifier type="name" position="([15, 32] - [15, 36]">read</identifier>
</scoped_identifier>

            <arguments type="arguments" position="([15, 36] - [15, 42]">(
              <identifier position="([15, 37] - [15, 41]">path</identifier>
)</arguments>
</call_expression>
?</try_expression>
;</let_declaration>

      <call_expression position="([16, 4] - [16, 16]">
        <identifier type="function" position="([16, 4] - [16, 6]">Ok</identifier>

        <arguments type="arguments" position="([16, 6] - [16, 16]">(
          <identifier position="([16, 7] - [16, 15]">contents</identifier>
)</arguments>
</call_expression>
}</block>
</function_item>

  <line_comment position="([19, 0] - [19, 98]">// Print error messages to stderr before exiting so programs calling this cli can detect it easily</line_comment>

  <macro_definition position="([20, 0] - [25, 1]">macro_rules!
    <identifier type="name" position="([20, 13] - [20, 23]">error_exit</identifier>
{
    <macro_rule position="([21, 4] - [24, 6]">
      <token_tree_pattern type="left" position="([21, 4] - [21, 30]">(
        <token_binding_pattern position="([21, 5] - [21, 14]">
          <metavariable type="name" position="([21, 5] - [21, 9]">$msg</metavariable>
:
          <fragment_specifier type="type" position="([21, 10] - [21, 14]">expr</fragment_specifier>
</token_binding_pattern>

        <token_repetition_pattern position="([21, 15] - [21, 29]">$(
          <token_binding_pattern position="([21, 18] - [21, 27]">
            <metavariable type="name" position="([21, 18] - [21, 22]">$arg</metavariable>
:
            <fragment_specifier type="type" position="([21, 23] - [21, 27]">expr</fragment_specifier>
</token_binding_pattern>
)*</token_repetition_pattern>
)</token_tree_pattern>
=&gt;
      <token_tree type="right" position="([21, 34] - [24, 6]">{
        <token_tree position="([21, 35] - [24, 5]">{
          <identifier position="([22, 8] - [22, 16]">eprintln</identifier>

          <token_tree position="([22, 17] - [22, 33]">(
            <metavariable position="([22, 18] - [22, 22]">$msg</metavariable>

            <token_repetition position="([22, 23] - [22, 32]">$(
              <metavariable position="([22, 26] - [22, 30]">$arg</metavariable>
)*</token_repetition>
)</token_tree>

          <identifier position="([23, 8] - [23, 15]">process</identifier>

          <identifier position="([23, 17] - [23, 21]">exit</identifier>

          <token_tree position="([23, 21] - [23, 24]">(
            <integer_literal position="([23, 22] - [23, 23]">1</integer_literal>
)</token_tree>
}</token_tree>
}</token_tree>
</macro_rule>
}</macro_definition>

  <function_item position="([27, 0] - [73, 1]">fn
    <identifier type="name" position="([27, 3] - [27, 15]">node_to_json</identifier>

    <parameters type="parameters" position="([27, 15] - [31, 1]">(
      <parameter position="([28, 4] - [28, 27]">
        <identifier type="pattern" position="([28, 4] - [28, 8]">node</identifier>
:
        <scoped_type_identifier type="type" position="([28, 10] - [28, 27]">
          <identifier type="path" position="([28, 10] - [28, 21]">tree_sitter</identifier>
::
          <type_identifier type="name" position="([28, 23] - [28, 27]">Node</type_identifier>
</scoped_type_identifier>
</parameter>
,
      <parameter position="([29, 4] - [29, 40]">
        <identifier type="pattern" position="([29, 4] - [29, 10]">cursor</identifier>
:
        <reference_type type="type" position="([29, 12] - [29, 40]">&amp;
          <mutable_specifier position="([29, 13] - [29, 16]">mut</mutable_specifier>

          <scoped_type_identifier type="type" position="([29, 17] - [29, 40]">
            <identifier type="path" position="([29, 17] - [29, 28]">tree_sitter</identifier>
::
            <type_identifier type="name" position="([29, 30] - [29, 40]">TreeCursor</type_identifier>
</scoped_type_identifier>
</reference_type>
</parameter>
,
      <parameter position="([30, 4] - [30, 22]">
        <identifier type="pattern" position="([30, 4] - [30, 15]">source_code</identifier>
:
        <reference_type type="type" position="([30, 17] - [30, 22]">&amp;
          <array_type type="type" position="([30, 18] - [30, 22]">[
            <primitive_type type="element" position="([30, 19] - [30, 21]">u8</primitive_type>
]</array_type>
</reference_type>
</parameter>
,)</parameters>
-&gt;
    <scoped_type_identifier type="return_type" position="([31, 5] - [31, 22]">
      <identifier type="path" position="([31, 5] - [31, 15]">serde_json</identifier>
::
      <type_identifier type="name" position="([31, 17] - [31, 22]">Value</type_identifier>
</scoped_type_identifier>

    <block type="body" position="([31, 23] - [73, 1]">{
      <let_declaration position="([32, 4] - [32, 34]">let
        <mutable_specifier position="([32, 8] - [32, 11]">mut</mutable_specifier>

        <identifier type="pattern" position="([32, 12] - [32, 20]">children</identifier>
=
        <call_expression type="value" position="([32, 23] - [32, 33]">
          <scoped_identifier type="function" position="([32, 23] - [32, 31]">
            <identifier type="path" position="([32, 23] - [32, 26]">Vec</identifier>
::
            <identifier type="name" position="([32, 28] - [32, 31]">new</identifier>
</scoped_identifier>

          <arguments type="arguments" position="([32, 31] - [32, 33]">()</arguments>
</call_expression>
;</let_declaration>

      <expression_statement position="([33, 4] - [41, 5]">
        <if_expression position="([33, 4] - [41, 5]">if
          <call_expression type="condition" position="([33, 7] - [33, 32]">
            <field_expression type="function" position="([33, 7] - [33, 30]">
              <identifier type="value" position="([33, 7] - [33, 13]">cursor</identifier>
.
              <field_identifier type="field" position="([33, 14] - [33, 30]">goto_first_child</field_identifier>
</field_expression>

            <arguments type="arguments" position="([33, 30] - [33, 32]">()</arguments>
</call_expression>

          <block type="consequence" position="([33, 33] - [41, 5]">{
            <expression_statement position="([34, 8] - [39, 9]">
              <loop_expression position="([34, 8] - [39, 9]">loop
                <block type="body" position="([34, 13] - [39, 9]">{
                  <expression_statement position="([35, 12] - [35, 76]">
                    <call_expression position="([35, 12] - [35, 75]">
                      <field_expression type="function" position="([35, 12] - [35, 25]">
                        <identifier type="value" position="([35, 12] - [35, 20]">children</identifier>
.
                        <field_identifier type="field" position="([35, 21] - [35, 25]">push</field_identifier>
</field_expression>

                      <arguments type="arguments" position="([35, 25] - [35, 75]">(
                        <call_expression position="([35, 26] - [35, 74]">
                          <identifier type="function" position="([35, 26] - [35, 38]">node_to_json</identifier>

                          <arguments type="arguments" position="([35, 38] - [35, 74]">(
                            <call_expression position="([35, 39] - [35, 52]">
                              <field_expression type="function" position="([35, 39] - [35, 50]">
                                <identifier type="value" position="([35, 39] - [35, 45]">cursor</identifier>
.
                                <field_identifier type="field" position="([35, 46] - [35, 50]">node</field_identifier>
</field_expression>

                              <arguments type="arguments" position="([35, 50] - [35, 52]">()</arguments>
</call_expression>
,
                            <identifier position="([35, 54] - [35, 60]">cursor</identifier>
,
                            <identifier position="([35, 62] - [35, 73]">source_code</identifier>
)</arguments>
</call_expression>
)</arguments>
</call_expression>
;</expression_statement>

                  <expression_statement position="([36, 12] - [38, 13]">
                    <if_expression position="([36, 12] - [38, 13]">if
                      <unary_expression type="condition" position="([36, 15] - [36, 42]">!
                        <call_expression position="([36, 16] - [36, 42]">
                          <field_expression type="function" position="([36, 16] - [36, 40]">
                            <identifier type="value" position="([36, 16] - [36, 22]">cursor</identifier>
.
                            <field_identifier type="field" position="([36, 23] - [36, 40]">goto_next_sibling</field_identifier>
</field_expression>

                          <arguments type="arguments" position="([36, 40] - [36, 42]">()</arguments>
</call_expression>
</unary_expression>

                      <block type="consequence" position="([36, 43] - [38, 13]">{
                        <expression_statement position="([37, 16] - [37, 22]">
                          <break_expression position="([37, 16] - [37, 21]">break</break_expression>
;</expression_statement>
}</block>
</if_expression>
</expression_statement>
}</block>
</loop_expression>
</expression_statement>

            <expression_statement position="([40, 8] - [40, 29]">
              <call_expression position="([40, 8] - [40, 28]">
                <field_expression type="function" position="([40, 8] - [40, 26]">
                  <identifier type="value" position="([40, 8] - [40, 14]">cursor</identifier>
.
                  <field_identifier type="field" position="([40, 15] - [40, 26]">goto_parent</field_identifier>
</field_expression>

                <arguments type="arguments" position="([40, 26] - [40, 28]">()</arguments>
</call_expression>
;</expression_statement>
}</block>
</if_expression>
</expression_statement>

      <let_declaration position="([43, 4] - [43, 41]">let
        <mutable_specifier position="([43, 8] - [43, 11]">mut</mutable_specifier>

        <identifier type="pattern" position="([43, 12] - [43, 15]">map</identifier>
=
        <call_expression type="value" position="([43, 18] - [43, 40]">
          <scoped_identifier type="function" position="([43, 18] - [43, 38]">
            <scoped_identifier type="path" position="([43, 18] - [43, 33]">
              <identifier type="path" position="([43, 18] - [43, 28]">serde_json</identifier>
::
              <identifier type="name" position="([43, 30] - [43, 33]">Map</identifier>
</scoped_identifier>
::
            <identifier type="name" position="([43, 35] - [43, 38]">new</identifier>
</scoped_identifier>

          <arguments type="arguments" position="([43, 38] - [43, 40]">()</arguments>
</call_expression>
;</let_declaration>

      <expression_statement position="([44, 4] - [44, 55]">
        <call_expression position="([44, 4] - [44, 54]">
          <field_expression type="function" position="([44, 4] - [44, 14]">
            <identifier type="value" position="([44, 4] - [44, 7]">map</identifier>
.
            <field_identifier type="field" position="([44, 8] - [44, 14]">insert</field_identifier>
</field_expression>

          <arguments type="arguments" position="([44, 14] - [44, 54]">(
            <call_expression position="([44, 15] - [44, 33]">
              <field_expression type="function" position="([44, 15] - [44, 31]">
                <string_literal type="value" position="([44, 15] - [44, 21]">""</string_literal>
.
                <field_identifier type="field" position="([44, 22] - [44, 31]">to_string</field_identifier>
</field_expression>

              <arguments type="arguments" position="([44, 31] - [44, 33]">()</arguments>
</call_expression>
,
            <macro_invocation position="([44, 35] - [44, 53]">
              <identifier type="macro" position="([44, 35] - [44, 39]">json</identifier>
!
              <token_tree position="([44, 40] - [44, 53]">(
                <identifier position="([44, 41] - [44, 45]">node</identifier>

                <identifier position="([44, 46] - [44, 50]">kind</identifier>

                <token_tree position="([44, 50] - [44, 52]">()</token_tree>
)</token_tree>
</macro_invocation>
)</arguments>
</call_expression>
;</expression_statement>

      <expression_statement position="([46, 4] - [48, 5]">
        <if_expression position="([46, 4] - [48, 5]">if
          <let_condition type="condition" position="([46, 7] - [46, 49]">let
            <tuple_struct_pattern type="pattern" position="([46, 11] - [46, 27]">
              <identifier type="type" position="([46, 11] - [46, 15]">Some</identifier>
(
              <identifier position="([46, 16] - [46, 26]">field_name</identifier>
)</tuple_struct_pattern>
=
            <call_expression type="value" position="([46, 30] - [46, 49]">
              <field_expression type="function" position="([46, 30] - [46, 47]">
                <identifier type="value" position="([46, 30] - [46, 36]">cursor</identifier>
.
                <field_identifier type="field" position="([46, 37] - [46, 47]">field_name</field_identifier>
</field_expression>

              <arguments type="arguments" position="([46, 47] - [46, 49]">()</arguments>
</call_expression>
</let_condition>

          <block type="consequence" position="([46, 50] - [48, 5]">{
            <expression_statement position="([47, 8] - [47, 58]">
              <call_expression position="([47, 8] - [47, 57]">
                <field_expression type="function" position="([47, 8] - [47, 18]">
                  <identifier type="value" position="([47, 8] - [47, 11]">map</identifier>
.
                  <field_identifier type="field" position="([47, 12] - [47, 18]">insert</field_identifier>
</field_expression>

                <arguments type="arguments" position="([47, 18] - [47, 57]">(
                  <call_expression position="([47, 19] - [47, 37]">
                    <field_expression type="function" position="([47, 19] - [47, 35]">
                      <string_literal type="value" position="([47, 19] - [47, 25]">""</string_literal>
.
                      <field_identifier type="field" position="([47, 26] - [47, 35]">to_string</field_identifier>
</field_expression>

                    <arguments type="arguments" position="([47, 35] - [47, 37]">()</arguments>
</call_expression>
,
                  <macro_invocation position="([47, 39] - [47, 56]">
                    <identifier type="macro" position="([47, 39] - [47, 43]">json</identifier>
!
                    <token_tree position="([47, 44] - [47, 56]">(
                      <identifier position="([47, 45] - [47, 55]">field_name</identifier>
)</token_tree>
</macro_invocation>
)</arguments>
</call_expression>
;</expression_statement>
}</block>
</if_expression>
</expression_statement>

      <let_declaration position="([50, 4] - [50, 38]">let
        <identifier type="pattern" position="([50, 8] - [50, 13]">start</identifier>
=
        <call_expression type="value" position="([50, 16] - [50, 37]">
          <field_expression type="function" position="([50, 16] - [50, 35]">
            <identifier type="value" position="([50, 16] - [50, 20]">node</identifier>
.
            <field_identifier type="field" position="([50, 21] - [50, 35]">start_position</field_identifier>
</field_expression>

          <arguments type="arguments" position="([50, 35] - [50, 37]">()</arguments>
</call_expression>
;</let_declaration>

      <let_declaration position="([51, 4] - [51, 34]">let
        <identifier type="pattern" position="([51, 8] - [51, 11]">end</identifier>
=
        <call_expression type="value" position="([51, 14] - [51, 33]">
          <field_expression type="function" position="([51, 14] - [51, 31]">
            <identifier type="value" position="([51, 14] - [51, 18]">node</identifier>
.
            <field_identifier type="field" position="([51, 19] - [51, 31]">end_position</field_identifier>
</field_expression>

          <arguments type="arguments" position="([51, 31] - [51, 33]">()</arguments>
</call_expression>
;</let_declaration>

      <expression_statement position="([53, 4] - [56, 6]">
        <call_expression position="([53, 4] - [56, 5]">
          <field_expression type="function" position="([53, 4] - [53, 14]">
            <identifier type="value" position="([53, 4] - [53, 7]">map</identifier>
.
            <field_identifier type="field" position="([53, 8] - [53, 14]">insert</field_identifier>
</field_expression>

          <arguments type="arguments" position="([53, 14] - [56, 5]">(
            <call_expression position="([54, 8] - [54, 27]">
              <field_expression type="function" position="([54, 8] - [54, 25]">
                <string_literal type="value" position="([54, 8] - [54, 15]">""</string_literal>
.
                <field_identifier type="field" position="([54, 16] - [54, 25]">to_string</field_identifier>
</field_expression>

              <arguments type="arguments" position="([54, 25] - [54, 27]">()</arguments>
</call_expression>
,
            <macro_invocation position="([55, 8] - [55, 57]">
              <identifier type="macro" position="([55, 8] - [55, 12]">json</identifier>
!
              <token_tree position="([55, 13] - [55, 57]">(
                <token_tree position="([55, 14] - [55, 56]">{
                  <string_literal position="([55, 15] - [55, 20]">""</string_literal>

                  <identifier position="([55, 22] - [55, 27]">start</identifier>

                  <identifier position="([55, 28] - [55, 31]">row</identifier>

                  <string_literal position="([55, 33] - [55, 41]">""</string_literal>

                  <identifier position="([55, 43] - [55, 48]">start</identifier>

                  <identifier position="([55, 49] - [55, 55]">column</identifier>
}</token_tree>
)</token_tree>
</macro_invocation>
,)</arguments>
</call_expression>
;</expression_statement>

      <expression_statement position="([57, 4] - [60, 6]">
        <call_expression position="([57, 4] - [60, 5]">
          <field_expression type="function" position="([57, 4] - [57, 14]">
            <identifier type="value" position="([57, 4] - [57, 7]">map</identifier>
.
            <field_identifier type="field" position="([57, 8] - [57, 14]">insert</field_identifier>
</field_expression>

          <arguments type="arguments" position="([57, 14] - [60, 5]">(
            <call_expression position="([58, 8] - [58, 25]">
              <field_expression type="function" position="([58, 8] - [58, 23]">
                <string_literal type="value" position="([58, 8] - [58, 13]">""</string_literal>
.
                <field_identifier type="field" position="([58, 14] - [58, 23]">to_string</field_identifier>
</field_expression>

              <arguments type="arguments" position="([58, 23] - [58, 25]">()</arguments>
</call_expression>
,
            <macro_invocation position="([59, 8] - [59, 53]">
              <identifier type="macro" position="([59, 8] - [59, 12]">json</identifier>
!
              <token_tree position="([59, 13] - [59, 53]">(
                <token_tree position="([59, 14] - [59, 52]">{
                  <string_literal position="([59, 15] - [59, 20]">""</string_literal>

                  <identifier position="([59, 22] - [59, 25]">end</identifier>

                  <identifier position="([59, 26] - [59, 29]">row</identifier>

                  <string_literal position="([59, 31] - [59, 39]">""</string_literal>

                  <identifier position="([59, 41] - [59, 44]">end</identifier>

                  <identifier position="([59, 45] - [59, 51]">column</identifier>
}</token_tree>
)</token_tree>
</macro_invocation>
,)</arguments>
</call_expression>
;</expression_statement>

      <expression_statement position="([61, 4] - [61, 56]">
        <call_expression position="([61, 4] - [61, 55]">
          <field_expression type="function" position="([61, 4] - [61, 14]">
            <identifier type="value" position="([61, 4] - [61, 7]">map</identifier>
.
            <field_identifier type="field" position="([61, 8] - [61, 14]">insert</field_identifier>
</field_expression>

          <arguments type="arguments" position="([61, 14] - [61, 55]">(
            <call_expression position="([61, 15] - [61, 37]">
              <field_expression type="function" position="([61, 15] - [61, 35]">
                <string_literal type="value" position="([61, 15] - [61, 25]">""</string_literal>
.
                <field_identifier type="field" position="([61, 26] - [61, 35]">to_string</field_identifier>
</field_expression>

              <arguments type="arguments" position="([61, 35] - [61, 37]">()</arguments>
</call_expression>
,
            <macro_invocation position="([61, 39] - [61, 54]">
              <identifier type="macro" position="([61, 39] - [61, 43]">json</identifier>
!
              <token_tree position="([61, 44] - [61, 54]">(
                <identifier position="([61, 45] - [61, 53]">children</identifier>
)</token_tree>
</macro_invocation>
)</arguments>
</call_expression>
;</expression_statement>

      <expression_statement position="([62, 4] - [65, 6]">
        <call_expression position="([62, 4] - [65, 5]">
          <field_expression type="function" position="([62, 4] - [62, 14]">
            <identifier type="value" position="([62, 4] - [62, 7]">map</identifier>
.
            <field_identifier type="field" position="([62, 8] - [62, 14]">insert</field_identifier>
</field_expression>

          <arguments type="arguments" position="([62, 14] - [65, 5]">(
            <call_expression position="([63, 8] - [63, 27]">
              <field_expression type="function" position="([63, 8] - [63, 25]">
                <string_literal type="value" position="([63, 8] - [63, 15]">""</string_literal>
.
                <field_identifier type="field" position="([63, 16] - [63, 25]">to_string</field_identifier>
</field_expression>

              <arguments type="arguments" position="([63, 25] - [63, 27]">()</arguments>
</call_expression>
,
            <macro_invocation position="([64, 8] - [64, 98]">
              <identifier type="macro" position="([64, 8] - [64, 12]">json</identifier>
!
              <token_tree position="([64, 13] - [64, 98]">(
                <identifier position="([64, 14] - [64, 17]">std</identifier>

                <primitive_type position="([64, 19] - [64, 22]">str</primitive_type>

                <identifier position="([64, 24] - [64, 33]">from_utf8</identifier>

                <token_tree position="([64, 33] - [64, 83]">(
                  <identifier position="([64, 35] - [64, 46]">source_code</identifier>

                  <token_tree position="([64, 46] - [64, 82]">[
                    <identifier position="([64, 47] - [64, 51]">node</identifier>

                    <identifier position="([64, 52] - [64, 62]">start_byte</identifier>

                    <token_tree position="([64, 62] - [64, 64]">()</token_tree>

                    <identifier position="([64, 66] - [64, 70]">node</identifier>

                    <identifier position="([64, 71] - [64, 79]">end_byte</identifier>

                    <token_tree position="([64, 79] - [64, 81]">()</token_tree>
]</token_tree>
)</token_tree>

                <identifier position="([64, 84] - [64, 93]">unwrap_or</identifier>

                <token_tree position="([64, 93] - [64, 97]">(
                  <string_literal position="([64, 94] - [64, 96]">""</string_literal>
)</token_tree>
)</token_tree>
</macro_invocation>
,)</arguments>
</call_expression>
;</expression_statement>

      <line_comment position="([67, 4] - [67, 71]">// We can add more fields here based on the node type, for example:</line_comment>

      <expression_statement position="([68, 4] - [70, 5]">
        <if_expression position="([68, 4] - [70, 5]">if
          <binary_expression type="condition" position="([68, 7] - [68, 34]">
            <call_expression type="left" position="([68, 7] - [68, 18]">
              <field_expression type="function" position="([68, 7] - [68, 16]">
                <identifier type="value" position="([68, 7] - [68, 11]">node</identifier>
.
                <field_identifier type="field" position="([68, 12] - [68, 16]">kind</field_identifier>
</field_expression>

              <arguments type="arguments" position="([68, 16] - [68, 18]">()</arguments>
</call_expression>
==
            <string_literal type="right" position="([68, 22] - [68, 34]">""</string_literal>
</binary_expression>

          <block type="consequence" position="([68, 35] - [70, 5]">{
            <expression_statement position="([69, 8] - [69, 59]">
              <call_expression position="([69, 8] - [69, 58]">
                <field_expression type="function" position="([69, 8] - [69, 18]">
                  <identifier type="value" position="([69, 8] - [69, 11]">map</identifier>
.
                  <field_identifier type="field" position="([69, 12] - [69, 18]">insert</field_identifier>
</field_expression>

                <arguments type="arguments" position="([69, 18] - [69, 58]">(
                  <call_expression position="([69, 19] - [69, 37]">
                    <field_expression type="function" position="([69, 19] - [69, 35]">
                      <string_literal type="value" position="([69, 19] - [69, 25]">""</string_literal>
.
                      <field_identifier type="field" position="([69, 26] - [69, 35]">to_string</field_identifier>
</field_expression>

                    <arguments type="arguments" position="([69, 35] - [69, 37]">()</arguments>
</call_expression>
,
                  <macro_invocation position="([69, 39] - [69, 57]">
                    <identifier type="macro" position="([69, 39] - [69, 43]">json</identifier>
!
                    <token_tree position="([69, 44] - [69, 57]">(
                      <string_literal position="([69, 45] - [69, 56]">""</string_literal>
)</token_tree>
</macro_invocation>
)</arguments>
</call_expression>
;</expression_statement>
}</block>
</if_expression>
</expression_statement>

      <call_expression position="([72, 4] - [72, 34]">
        <scoped_identifier type="function" position="([72, 4] - [72, 29]">
          <scoped_identifier type="path" position="([72, 4] - [72, 21]">
            <identifier type="path" position="([72, 4] - [72, 14]">serde_json</identifier>
::
            <identifier type="name" position="([72, 16] - [72, 21]">Value</identifier>
</scoped_identifier>
::
          <identifier type="name" position="([72, 23] - [72, 29]">Object</identifier>
</scoped_identifier>

        <arguments type="arguments" position="([72, 29] - [72, 34]">(
          <identifier position="([72, 30] - [72, 33]">map</identifier>
)</arguments>
</call_expression>
}</block>
</function_item>

  <function_item position="([75, 0] - [367, 1]">fn
    <identifier type="name" position="([75, 3] - [75, 7]">main</identifier>

    <parameters type="parameters" position="([75, 7] - [75, 9]">()</parameters>

    <block type="body" position="([75, 10] - [367, 1]">{
      <line_comment position="([76, 4] - [76, 64]">// Vector to store the arguments passed in the command line.</line_comment>

      <let_declaration position="([77, 4] - [77, 50]">let
        <identifier type="pattern" position="([77, 8] - [77, 12]">args</identifier>
:
        <generic_type type="type" position="([77, 14] - [77, 25]">
          <type_identifier type="type" position="([77, 14] - [77, 17]">Vec</type_identifier>

          <type_arguments type="type_arguments" position="([77, 17] - [77, 25]">&lt;
            <type_identifier position="([77, 18] - [77, 24]">String</type_identifier>
&gt;</type_arguments>
</generic_type>
=
        <call_expression type="value" position="([77, 28] - [77, 49]">
          <field_expression type="function" position="([77, 28] - [77, 47]">
            <call_expression type="value" position="([77, 28] - [77, 39]">
              <scoped_identifier type="function" position="([77, 28] - [77, 37]">
                <identifier type="path" position="([77, 28] - [77, 31]">env</identifier>
::
                <identifier type="name" position="([77, 33] - [77, 37]">args</identifier>
</scoped_identifier>

              <arguments type="arguments" position="([77, 37] - [77, 39]">()</arguments>
</call_expression>
.
            <field_identifier type="field" position="([77, 40] - [77, 47]">collect</field_identifier>
</field_expression>

          <arguments type="arguments" position="([77, 47] - [77, 49]">()</arguments>
</call_expression>
;</let_declaration>

      <expression_statement position="([79, 4] - [85, 5]">
        <if_expression position="([79, 4] - [85, 5]">if
          <binary_expression type="condition" position="([79, 7] - [79, 21]">
            <call_expression type="left" position="([79, 7] - [79, 17]">
              <field_expression type="function" position="([79, 7] - [79, 15]">
                <identifier type="value" position="([79, 7] - [79, 11]">args</identifier>
.
                <field_identifier type="field" position="([79, 12] - [79, 15]">len</field_identifier>
</field_expression>

              <arguments type="arguments" position="([79, 15] - [79, 17]">()</arguments>
</call_expression>
&lt;
            <integer_literal type="right" position="([79, 20] - [79, 21]">3</integer_literal>
</binary_expression>

          <block type="consequence" position="([79, 22] - [85, 5]">{
            <expression_statement position="([80, 8] - [83, 9]">
              <if_expression position="([80, 8] - [83, 9]">if
                <binary_expression type="condition" position="([80, 11] - [80, 73]">
                  <binary_expression type="left" position="([80, 11] - [80, 51]">
                    <binary_expression type="left" position="([80, 11] - [80, 30]">
                      <index_expression type="left" position="([80, 11] - [80, 18]">
                        <identifier position="([80, 11] - [80, 15]">args</identifier>
[
                        <integer_literal position="([80, 16] - [80, 17]">1</integer_literal>
]</index_expression>
==
                      <string_literal type="right" position="([80, 22] - [80, 30]">""</string_literal>
</binary_expression>
||
                    <binary_expression type="right" position="([80, 34] - [80, 51]">
                      <index_expression type="left" position="([80, 34] - [80, 41]">
                        <identifier position="([80, 34] - [80, 38]">args</identifier>
[
                        <integer_literal position="([80, 39] - [80, 40]">1</integer_literal>
]</index_expression>
==
                      <string_literal type="right" position="([80, 45] - [80, 51]">""</string_literal>
</binary_expression>
</binary_expression>
||
                  <binary_expression type="right" position="([80, 55] - [80, 73]">
                    <index_expression type="left" position="([80, 55] - [80, 62]">
                      <identifier position="([80, 55] - [80, 59]">args</identifier>
[
                      <integer_literal position="([80, 60] - [80, 61]">1</integer_literal>
]</index_expression>
==
                    <string_literal type="right" position="([80, 66] - [80, 73]">""</string_literal>
</binary_expression>
</binary_expression>

                <block type="consequence" position="([80, 74] - [83, 9]">{
                  <expression_statement position="([81, 12] - [81, 128]">
                    <macro_invocation position="([81, 12] - [81, 127]">
                      <identifier type="macro" position="([81, 12] - [81, 19]">println</identifier>
!
                      <token_tree position="([81, 20] - [81, 127]">(
                        <string_literal position="([81, 21] - [81, 126]">""</string_literal>
)</token_tree>
</macro_invocation>
;</expression_statement>

                  <expression_statement position="([82, 12] - [82, 29]">
                    <call_expression position="([82, 12] - [82, 28]">
                      <scoped_identifier type="function" position="([82, 12] - [82, 25]">
                        <identifier type="path" position="([82, 12] - [82, 19]">process</identifier>
::
                        <identifier type="name" position="([82, 21] - [82, 25]">exit</identifier>
</scoped_identifier>

                      <arguments type="arguments" position="([82, 25] - [82, 28]">(
                        <integer_literal position="([82, 26] - [82, 27]">0</integer_literal>
)</arguments>
</call_expression>
;</expression_statement>
}</block>
</if_expression>
</expression_statement>

            <expression_statement position="([84, 8] - [84, 127]">
              <macro_invocation position="([84, 8] - [84, 126]">
                <identifier type="macro" position="([84, 8] - [84, 18]">error_exit</identifier>
!
                <token_tree position="([84, 19] - [84, 126]">(
                  <string_literal position="([84, 20] - [84, 125]">""</string_literal>
)</token_tree>
</macro_invocation>
;</expression_statement>
}</block>
</if_expression>
</expression_statement>

      <line_comment position="([87, 4] - [87, 29]">// Parse string arguments</line_comment>

      <let_declaration position="([88, 4] - [88, 32]">let
        <identifier type="pattern" position="([88, 8] - [88, 20]">language_arg</identifier>
=
        <reference_expression type="value" position="([88, 23] - [88, 31]">&amp;
          <index_expression type="value" position="([88, 24] - [88, 31]">
            <identifier position="([88, 24] - [88, 28]">args</identifier>
[
            <integer_literal position="([88, 29] - [88, 30]">1</integer_literal>
]</index_expression>
</reference_expression>
;</let_declaration>

      <let_declaration position="([89, 4] - [89, 34]">let
        <identifier type="pattern" position="([89, 8] - [89, 22]">sourcepath_arg</identifier>
=
        <reference_expression type="value" position="([89, 25] - [89, 33]">&amp;
          <index_expression type="value" position="([89, 26] - [89, 33]">
            <identifier position="([89, 26] - [89, 30]">args</identifier>
[
            <integer_literal position="([89, 31] - [89, 32]">2</integer_literal>
]</index_expression>
</reference_expression>
;</let_declaration>

      <let_declaration position="([90, 4] - [90, 45]">let
        <mutable_specifier position="([90, 8] - [90, 11]">mut</mutable_specifier>

        <identifier type="pattern" position="([90, 12] - [90, 18]">format</identifier>
=
        <reference_expression type="value" position="([90, 21] - [90, 44]">&amp;
          <call_expression type="value" position="([90, 22] - [90, 44]">
            <scoped_identifier type="function" position="([90, 22] - [90, 34]">
              <identifier type="path" position="([90, 22] - [90, 28]">String</identifier>
::
              <identifier type="name" position="([90, 30] - [90, 34]">from</identifier>
</scoped_identifier>

            <arguments type="arguments" position="([90, 34] - [90, 44]">(
              <string_literal position="([90, 35] - [90, 43]">""</string_literal>
)</arguments>
</call_expression>
</reference_expression>
;</let_declaration>

      <expression_statement position="([92, 4] - [94, 5]">
        <if_expression position="([92, 4] - [94, 5]">if
          <binary_expression type="condition" position="([92, 7] - [92, 22]">
            <call_expression type="left" position="([92, 7] - [92, 17]">
              <field_expression type="function" position="([92, 7] - [92, 15]">
                <identifier type="value" position="([92, 7] - [92, 11]">args</identifier>
.
                <field_identifier type="field" position="([92, 12] - [92, 15]">len</field_identifier>
</field_expression>

              <arguments type="arguments" position="([92, 15] - [92, 17]">()</arguments>
</call_expression>
==
            <integer_literal type="right" position="([92, 21] - [92, 22]">4</integer_literal>
</binary_expression>

          <block type="consequence" position="([92, 23] - [94, 5]">{
            <expression_statement position="([93, 8] - [93, 26]">
              <assignment_expression position="([93, 8] - [93, 25]">
                <identifier type="left" position="([93, 8] - [93, 14]">format</identifier>
=
                <reference_expression type="right" position="([93, 17] - [93, 25]">&amp;
                  <index_expression type="value" position="([93, 18] - [93, 25]">
                    <identifier position="([93, 18] - [93, 22]">args</identifier>
[
                    <integer_literal position="([93, 23] - [93, 24]">3</integer_literal>
]</index_expression>
</reference_expression>
</assignment_expression>
;</expression_statement>
}</block>
</if_expression>
</expression_statement>

      <expression_statement position="([96, 4] - [100, 5]">
        <if_expression position="([96, 4] - [100, 5]">if
          <binary_expression type="condition" position="([96, 7] - [96, 64]">
            <binary_expression type="left" position="([96, 7] - [96, 44]">
              <binary_expression type="left" position="([96, 7] - [96, 25]">
                <identifier type="left" position="([96, 7] - [96, 13]">format</identifier>
!=
                <string_literal type="right" position="([96, 17] - [96, 25]">""</string_literal>
</binary_expression>
&amp;&amp;
              <binary_expression type="right" position="([96, 29] - [96, 44]">
                <identifier type="left" position="([96, 29] - [96, 35]">format</identifier>
!=
                <string_literal type="right" position="([96, 39] - [96, 44]">""</string_literal>
</binary_expression>
</binary_expression>
&amp;&amp;
            <binary_expression type="right" position="([96, 48] - [96, 64]">
              <identifier type="left" position="([96, 48] - [96, 54]">format</identifier>
!=
              <string_literal type="right" position="([96, 58] - [96, 64]">""</string_literal>
</binary_expression>
</binary_expression>

          <block type="consequence" position="([96, 65] - [100, 5]">{
            <expression_statement position="([97, 8] - [99, 10]">
              <macro_invocation position="([97, 8] - [99, 9]">
                <identifier type="macro" position="([97, 8] - [97, 18]">error_exit</identifier>
!
                <token_tree position="([97, 19] - [99, 9]">(
                  <string_literal position="([98, 12] - [98, 100]">""</string_literal>
)</token_tree>
</macro_invocation>
;</expression_statement>
}</block>
</if_expression>
</expression_statement>

      <let_declaration position="([102, 4] - [102, 35]">let
        <mutable_specifier position="([102, 8] - [102, 11]">mut</mutable_specifier>

        <identifier type="pattern" position="([102, 12] - [102, 18]">parser</identifier>
=
        <call_expression type="value" position="([102, 21] - [102, 34]">
          <scoped_identifier type="function" position="([102, 21] - [102, 32]">
            <identifier type="path" position="([102, 21] - [102, 27]">Parser</identifier>
::
            <identifier type="name" position="([102, 29] - [102, 32]">new</identifier>
</scoped_identifier>

          <arguments type="arguments" position="([102, 32] - [102, 34]">()</arguments>
</call_expression>
;</let_declaration>

      <expression_statement position="([104, 4] - [130, 5]">
        <match_expression position="([104, 4] - [130, 5]">match
          <call_expression type="value" position="([104, 10] - [104, 31]">
            <field_expression type="function" position="([104, 10] - [104, 29]">
              <identifier type="value" position="([104, 10] - [104, 22]">language_arg</identifier>
.
              <field_identifier type="field" position="([104, 23] - [104, 29]">as_ref</field_identifier>
</field_expression>

            <arguments type="arguments" position="([104, 29] - [104, 31]">()</arguments>
</call_expression>

          <match_block type="body" position="([104, 32] - [130, 5]">{
            <match_arm position="([105, 8] - [107, 50]">
              <match_pattern type="pattern" position="([105, 8] - [105, 14]">
                <string_literal position="([105, 8] - [105, 14]">""</string_literal>
</match_pattern>
=&gt;
              <call_expression type="value" position="([105, 18] - [107, 49]">
                <field_expression type="function" position="([105, 18] - [107, 19]">
                  <call_expression type="value" position="([105, 18] - [106, 55]">
                    <field_expression type="function" position="([105, 18] - [106, 25]">
                      <identifier type="value" position="([105, 18] - [105, 24]">parser</identifier>
.
                      <field_identifier type="field" position="([106, 13] - [106, 25]">set_language</field_identifier>
</field_expression>

                    <arguments type="arguments" position="([106, 25] - [106, 55]">(
                      <call_expression position="([106, 26] - [106, 54]">
                        <scoped_identifier type="function" position="([106, 26] - [106, 52]">
                          <identifier type="path" position="([106, 26] - [106, 42]">tree_sitter_rust</identifier>
::
                          <identifier type="name" position="([106, 44] - [106, 52]">language</identifier>
</scoped_identifier>

                        <arguments type="arguments" position="([106, 52] - [106, 54]">()</arguments>
</call_expression>
)</arguments>
</call_expression>
.
                  <field_identifier type="field" position="([107, 13] - [107, 19]">expect</field_identifier>
</field_expression>

                <arguments type="arguments" position="([107, 19] - [107, 49]">(
                  <string_literal position="([107, 20] - [107, 48]">""</string_literal>
)</arguments>
</call_expression>
,</match_arm>

            <match_arm position="([108, 8] - [110, 50]">
              <match_pattern type="pattern" position="([108, 8] - [108, 12]">
                <string_literal position="([108, 8] - [108, 12]">""</string_literal>
</match_pattern>
=&gt;
              <call_expression type="value" position="([108, 16] - [110, 49]">
                <field_expression type="function" position="([108, 16] - [110, 19]">
                  <call_expression type="value" position="([108, 16] - [109, 53]">
                    <field_expression type="function" position="([108, 16] - [109, 25]">
                      <identifier type="value" position="([108, 16] - [108, 22]">parser</identifier>
.
                      <field_identifier type="field" position="([109, 13] - [109, 25]">set_language</field_identifier>
</field_expression>

                    <arguments type="arguments" position="([109, 25] - [109, 53]">(
                      <call_expression position="([109, 26] - [109, 52]">
                        <scoped_identifier type="function" position="([109, 26] - [109, 50]">
                          <identifier type="path" position="([109, 26] - [109, 40]">tree_sitter_go</identifier>
::
                          <identifier type="name" position="([109, 42] - [109, 50]">language</identifier>
</scoped_identifier>

                        <arguments type="arguments" position="([109, 50] - [109, 52]">()</arguments>
</call_expression>
)</arguments>
</call_expression>
.
                  <field_identifier type="field" position="([110, 13] - [110, 19]">expect</field_identifier>
</field_expression>

                <arguments type="arguments" position="([110, 19] - [110, 49]">(
                  <string_literal position="([110, 20] - [110, 48]">""</string_literal>
)</arguments>
</call_expression>
,</match_arm>

            <match_arm position="([111, 8] - [113, 50]">
              <match_pattern type="pattern" position="([111, 8] - [111, 20]">
                <string_literal position="([111, 8] - [111, 20]">""</string_literal>
</match_pattern>
=&gt;
              <call_expression type="value" position="([111, 24] - [113, 49]">
                <field_expression type="function" position="([111, 24] - [113, 19]">
                  <call_expression type="value" position="([111, 24] - [112, 61]">
                    <field_expression type="function" position="([111, 24] - [112, 25]">
                      <identifier type="value" position="([111, 24] - [111, 30]">parser</identifier>
.
                      <field_identifier type="field" position="([112, 13] - [112, 25]">set_language</field_identifier>
</field_expression>

                    <arguments type="arguments" position="([112, 25] - [112, 61]">(
                      <call_expression position="([112, 26] - [112, 60]">
                        <scoped_identifier type="function" position="([112, 26] - [112, 58]">
                          <identifier type="path" position="([112, 26] - [112, 48]">tree_sitter_javascript</identifier>
::
                          <identifier type="name" position="([112, 50] - [112, 58]">language</identifier>
</scoped_identifier>

                        <arguments type="arguments" position="([112, 58] - [112, 60]">()</arguments>
</call_expression>
)</arguments>
</call_expression>
.
                  <field_identifier type="field" position="([113, 13] - [113, 19]">expect</field_identifier>
</field_expression>

                <arguments type="arguments" position="([113, 19] - [113, 49]">(
                  <string_literal position="([113, 20] - [113, 48]">""</string_literal>
)</arguments>
</call_expression>
,</match_arm>

            <match_arm position="([114, 8] - [116, 50]">
              <match_pattern type="pattern" position="([114, 8] - [114, 16]">
                <string_literal position="([114, 8] - [114, 16]">""</string_literal>
</match_pattern>
=&gt;
              <call_expression type="value" position="([114, 20] - [116, 49]">
                <field_expression type="function" position="([114, 20] - [116, 19]">
                  <call_expression type="value" position="([114, 20] - [115, 57]">
                    <field_expression type="function" position="([114, 20] - [115, 25]">
                      <identifier type="value" position="([114, 20] - [114, 26]">parser</identifier>
.
                      <field_identifier type="field" position="([115, 13] - [115, 25]">set_language</field_identifier>
</field_expression>

                    <arguments type="arguments" position="([115, 25] - [115, 57]">(
                      <call_expression position="([115, 26] - [115, 56]">
                        <scoped_identifier type="function" position="([115, 26] - [115, 54]">
                          <identifier type="path" position="([115, 26] - [115, 44]">tree_sitter_python</identifier>
::
                          <identifier type="name" position="([115, 46] - [115, 54]">language</identifier>
</scoped_identifier>

                        <arguments type="arguments" position="([115, 54] - [115, 56]">()</arguments>
</call_expression>
)</arguments>
</call_expression>
.
                  <field_identifier type="field" position="([116, 13] - [116, 19]">expect</field_identifier>
</field_expression>

                <arguments type="arguments" position="([116, 19] - [116, 49]">(
                  <string_literal position="([116, 20] - [116, 48]">""</string_literal>
)</arguments>
</call_expression>
,</match_arm>

            <match_arm position="([117, 8] - [119, 50]">
              <match_pattern type="pattern" position="([117, 8] - [117, 11]">
                <string_literal position="([117, 8] - [117, 11]">""</string_literal>
</match_pattern>
=&gt;
              <call_expression type="value" position="([117, 15] - [119, 49]">
                <field_expression type="function" position="([117, 15] - [119, 19]">
                  <call_expression type="value" position="([117, 15] - [118, 52]">
                    <field_expression type="function" position="([117, 15] - [118, 25]">
                      <identifier type="value" position="([117, 15] - [117, 21]">parser</identifier>
.
                      <field_identifier type="field" position="([118, 13] - [118, 25]">set_language</field_identifier>
</field_expression>

                    <arguments type="arguments" position="([118, 25] - [118, 52]">(
                      <call_expression position="([118, 26] - [118, 51]">
                        <scoped_identifier type="function" position="([118, 26] - [118, 49]">
                          <identifier type="path" position="([118, 26] - [118, 39]">tree_sitter_c</identifier>
::
                          <identifier type="name" position="([118, 41] - [118, 49]">language</identifier>
</scoped_identifier>

                        <arguments type="arguments" position="([118, 49] - [118, 51]">()</arguments>
</call_expression>
)</arguments>
</call_expression>
.
                  <field_identifier type="field" position="([119, 13] - [119, 19]">expect</field_identifier>
</field_expression>

                <arguments type="arguments" position="([119, 19] - [119, 49]">(
                  <string_literal position="([119, 20] - [119, 48]">""</string_literal>
)</arguments>
</call_expression>
,</match_arm>

            <match_arm position="([120, 8] - [122, 50]">
              <match_pattern type="pattern" position="([120, 8] - [120, 13]">
                <string_literal position="([120, 8] - [120, 13]">""</string_literal>
</match_pattern>
=&gt;
              <call_expression type="value" position="([120, 17] - [122, 49]">
                <field_expression type="function" position="([120, 17] - [122, 19]">
                  <call_expression type="value" position="([120, 17] - [121, 54]">
                    <field_expression type="function" position="([120, 17] - [121, 25]">
                      <identifier type="value" position="([120, 17] - [120, 23]">parser</identifier>
.
                      <field_identifier type="field" position="([121, 13] - [121, 25]">set_language</field_identifier>
</field_expression>

                    <arguments type="arguments" position="([121, 25] - [121, 54]">(
                      <call_expression position="([121, 26] - [121, 53]">
                        <scoped_identifier type="function" position="([121, 26] - [121, 51]">
                          <identifier type="path" position="([121, 26] - [121, 41]">tree_sitter_cpp</identifier>
::
                          <identifier type="name" position="([121, 43] - [121, 51]">language</identifier>
</scoped_identifier>

                        <arguments type="arguments" position="([121, 51] - [121, 53]">()</arguments>
</call_expression>
)</arguments>
</call_expression>
.
                  <field_identifier type="field" position="([122, 13] - [122, 19]">expect</field_identifier>
</field_expression>

                <arguments type="arguments" position="([122, 19] - [122, 49]">(
                  <string_literal position="([122, 20] - [122, 48]">""</string_literal>
)</arguments>
</call_expression>
,</match_arm>

            <match_arm position="([123, 8] - [125, 50]">
              <match_pattern type="pattern" position="([123, 8] - [123, 15]">
                <string_literal position="([123, 8] - [123, 15]">""</string_literal>
</match_pattern>
=&gt;
              <call_expression type="value" position="([123, 19] - [125, 49]">
                <field_expression type="function" position="([123, 19] - [125, 19]">
                  <call_expression type="value" position="([123, 19] - [124, 56]">
                    <field_expression type="function" position="([123, 19] - [124, 25]">
                      <identifier type="value" position="([123, 19] - [123, 25]">parser</identifier>
.
                      <field_identifier type="field" position="([124, 13] - [124, 25]">set_language</field_identifier>
</field_expression>

                    <arguments type="arguments" position="([124, 25] - [124, 56]">(
                      <call_expression position="([124, 26] - [124, 55]">
                        <scoped_identifier type="function" position="([124, 26] - [124, 53]">
                          <identifier type="path" position="([124, 26] - [124, 43]">tree_sitter_swift</identifier>
::
                          <identifier type="name" position="([124, 45] - [124, 53]">language</identifier>
</scoped_identifier>

                        <arguments type="arguments" position="([124, 53] - [124, 55]">()</arguments>
</call_expression>
)</arguments>
</call_expression>
.
                  <field_identifier type="field" position="([125, 13] - [125, 19]">expect</field_identifier>
</field_expression>

                <arguments type="arguments" position="([125, 19] - [125, 49]">(
                  <string_literal position="([125, 20] - [125, 48]">""</string_literal>
)</arguments>
</call_expression>
,</match_arm>

            <match_arm position="([126, 8] - [128, 50]">
              <match_pattern type="pattern" position="([126, 8] - [126, 14]">
                <string_literal position="([126, 8] - [126, 14]">""</string_literal>
</match_pattern>
=&gt;
              <call_expression type="value" position="([126, 18] - [128, 49]">
                <field_expression type="function" position="([126, 18] - [128, 19]">
                  <call_expression type="value" position="([126, 18] - [127, 55]">
                    <field_expression type="function" position="([126, 18] - [127, 25]">
                      <identifier type="value" position="([126, 18] - [126, 24]">parser</identifier>
.
                      <field_identifier type="field" position="([127, 13] - [127, 25]">set_language</field_identifier>
</field_expression>

                    <arguments type="arguments" position="([127, 25] - [127, 55]">(
                      <call_expression position="([127, 26] - [127, 54]">
                        <scoped_identifier type="function" position="([127, 26] - [127, 52]">
                          <identifier type="path" position="([127, 26] - [127, 42]">tree_sitter_html</identifier>
::
                          <identifier type="name" position="([127, 44] - [127, 52]">language</identifier>
</scoped_identifier>

                        <arguments type="arguments" position="([127, 52] - [127, 54]">()</arguments>
</call_expression>
)</arguments>
</call_expression>
.
                  <field_identifier type="field" position="([128, 13] - [128, 19]">expect</field_identifier>
</field_expression>

                <arguments type="arguments" position="([128, 19] - [128, 49]">(
                  <string_literal position="([128, 20] - [128, 48]">""</string_literal>
)</arguments>
</call_expression>
,</match_arm>

            <match_arm position="([129, 8] - [129, 55]">
              <match_pattern type="pattern" position="([129, 8] - [129, 10]">
                <reference_pattern position="([129, 8] - [129, 10]">&amp;_</reference_pattern>
</match_pattern>
=&gt;
              <macro_invocation type="value" position="([129, 14] - [129, 54]">
                <identifier type="macro" position="([129, 14] - [129, 24]">error_exit</identifier>
!
                <token_tree position="([129, 25] - [129, 54]">(
                  <string_literal position="([129, 26] - [129, 53]">""</string_literal>
)</token_tree>
</macro_invocation>
,</match_arm>
}</match_block>
</match_expression>
</expression_statement>

      <let_declaration position="([132, 4] - [135, 6]">let
        <identifier type="pattern" position="([132, 8] - [132, 19]">source_code</identifier>
=
        <match_expression type="value" position="([132, 22] - [135, 5]">match
          <call_expression type="value" position="([132, 28] - [132, 53]">
            <identifier type="function" position="([132, 28] - [132, 37]">read_file</identifier>

            <arguments type="arguments" position="([132, 37] - [132, 53]">(
              <identifier position="([132, 38] - [132, 52]">sourcepath_arg</identifier>
)</arguments>
</call_expression>

          <match_block type="body" position="([132, 54] - [135, 5]">{
            <match_arm position="([133, 8] - [133, 33]">
              <match_pattern type="pattern" position="([133, 8] - [133, 20]">
                <tuple_struct_pattern position="([133, 8] - [133, 20]">
                  <identifier type="type" position="([133, 8] - [133, 10]">Ok</identifier>
(
                  <identifier position="([133, 11] - [133, 19]">contents</identifier>
)</tuple_struct_pattern>
</match_pattern>
=&gt;
              <identifier type="value" position="([133, 24] - [133, 32]">contents</identifier>
,</match_arm>

            <match_arm position="([134, 8] - [134, 63]">
              <match_pattern type="pattern" position="([134, 8] - [134, 16]">
                <tuple_struct_pattern position="([134, 8] - [134, 16]">
                  <identifier type="type" position="([134, 8] - [134, 11]">Err</identifier>
(
                  <identifier position="([134, 12] - [134, 15]">err</identifier>
)</tuple_struct_pattern>
</match_pattern>
=&gt;
              <macro_invocation type="value" position="([134, 20] - [134, 62]">
                <identifier type="macro" position="([134, 20] - [134, 30]">error_exit</identifier>
!
                <token_tree position="([134, 31] - [134, 62]">(
                  <string_literal position="([134, 32] - [134, 56]">""</string_literal>

                  <identifier position="([134, 58] - [134, 61]">err</identifier>
)</token_tree>
</macro_invocation>
,</match_arm>
}</match_block>
</match_expression>
;</let_declaration>

      <let_declaration position="([137, 4] - [139, 7]">let
        <identifier type="pattern" position="([137, 8] - [137, 12]">tree</identifier>
=
        <call_expression type="value" position="([137, 15] - [139, 6]">
          <field_expression type="function" position="([137, 15] - [137, 62]">
            <call_expression type="value" position="([137, 15] - [137, 47]">
              <field_expression type="function" position="([137, 15] - [137, 27]">
                <identifier type="value" position="([137, 15] - [137, 21]">parser</identifier>
.
                <field_identifier type="field" position="([137, 22] - [137, 27]">parse</field_identifier>
</field_expression>

              <arguments type="arguments" position="([137, 27] - [137, 47]">(
                <reference_expression position="([137, 28] - [137, 40]">&amp;
                  <identifier type="value" position="([137, 29] - [137, 40]">source_code</identifier>
</reference_expression>
,
                <identifier position="([137, 42] - [137, 46]">None</identifier>
)</arguments>
</call_expression>
.
            <field_identifier type="field" position="([137, 48] - [137, 62]">unwrap_or_else</field_identifier>
</field_expression>

          <arguments type="arguments" position="([137, 62] - [139, 6]">(
            <closure_expression position="([137, 63] - [139, 5]">
              <closure_parameters type="parameters" position="([137, 63] - [137, 65]">||</closure_parameters>

              <block type="body" position="([137, 66] - [139, 5]">{
                <expression_statement position="([138, 8] - [138, 53]">
                  <macro_invocation position="([138, 8] - [138, 52]">
                    <identifier type="macro" position="([138, 8] - [138, 18]">error_exit</identifier>
!
                    <token_tree position="([138, 19] - [138, 52]">(
                      <string_literal position="([138, 20] - [138, 51]">""</string_literal>
)</token_tree>
</macro_invocation>
;</expression_statement>
}</block>
</closure_expression>
)</arguments>
</call_expression>
;</let_declaration>

      <let_declaration position="([141, 4] - [141, 30]">let
        <identifier type="pattern" position="([141, 8] - [141, 14]">stdout</identifier>
=
        <call_expression type="value" position="([141, 17] - [141, 29]">
          <scoped_identifier type="function" position="([141, 17] - [141, 27]">
            <identifier type="path" position="([141, 17] - [141, 19]">io</identifier>
::
            <identifier type="name" position="([141, 21] - [141, 27]">stdout</identifier>
</scoped_identifier>

          <arguments type="arguments" position="([141, 27] - [141, 29]">()</arguments>
</call_expression>
;</let_declaration>

      <let_declaration position="([142, 4] - [142, 35]">let
        <mutable_specifier position="([142, 8] - [142, 11]">mut</mutable_specifier>

        <identifier type="pattern" position="([142, 12] - [142, 18]">stdout</identifier>
=
        <call_expression type="value" position="([142, 21] - [142, 34]">
          <field_expression type="function" position="([142, 21] - [142, 32]">
            <identifier type="value" position="([142, 21] - [142, 27]">stdout</identifier>
.
            <field_identifier type="field" position="([142, 28] - [142, 32]">lock</field_identifier>
</field_expression>

          <arguments type="arguments" position="([142, 32] - [142, 34]">()</arguments>
</call_expression>
;</let_declaration>

      <let_declaration position="([144, 4] - [144, 33]">let
        <mutable_specifier position="([144, 8] - [144, 11]">mut</mutable_specifier>

        <identifier type="pattern" position="([144, 12] - [144, 18]">cursor</identifier>
=
        <call_expression type="value" position="([144, 21] - [144, 32]">
          <field_expression type="function" position="([144, 21] - [144, 30]">
            <identifier type="value" position="([144, 21] - [144, 25]">tree</identifier>
.
            <field_identifier type="field" position="([144, 26] - [144, 30]">walk</field_identifier>
</field_expression>

          <arguments type="arguments" position="([144, 30] - [144, 32]">()</arguments>
</call_expression>
;</let_declaration>

      <expression_statement position="([146, 4] - [211, 5]">
        <if_expression position="([146, 4] - [211, 5]">if
          <binary_expression type="condition" position="([146, 7] - [146, 25]">
            <identifier type="left" position="([146, 7] - [146, 13]">format</identifier>
==
            <string_literal type="right" position="([146, 17] - [146, 25]">""</string_literal>
</binary_expression>

          <block type="consequence" position="([146, 26] - [211, 5]">{
            <let_declaration position="([147, 8] - [147, 38]">let
              <mutable_specifier position="([147, 12] - [147, 15]">mut</mutable_specifier>

              <identifier type="pattern" position="([147, 16] - [147, 29]">needs_newline</identifier>
=
              <boolean_literal type="value" position="([147, 32] - [147, 37]">false</boolean_literal>
;</let_declaration>

            <let_declaration position="([148, 8] - [148, 33]">let
              <mutable_specifier position="([148, 12] - [148, 15]">mut</mutable_specifier>

              <identifier type="pattern" position="([148, 16] - [148, 28]">indent_level</identifier>
=
              <integer_literal type="value" position="([148, 31] - [148, 32]">0</integer_literal>
;</let_declaration>

            <let_declaration position="([149, 8] - [149, 43]">let
              <mutable_specifier position="([149, 12] - [149, 15]">mut</mutable_specifier>

              <identifier type="pattern" position="([149, 16] - [149, 34]">did_visit_children</identifier>
=
              <boolean_literal type="value" position="([149, 37] - [149, 42]">false</boolean_literal>
;</let_declaration>

            <expression_statement position="([150, 8] - [208, 9]">
              <loop_expression position="([150, 8] - [208, 9]">loop
                <block type="body" position="([150, 13] - [208, 9]">{
                  <let_declaration position="([151, 12] - [151, 37]">let
                    <identifier type="pattern" position="([151, 16] - [151, 20]">node</identifier>
=
                    <call_expression type="value" position="([151, 23] - [151, 36]">
                      <field_expression type="function" position="([151, 23] - [151, 34]">
                        <identifier type="value" position="([151, 23] - [151, 29]">cursor</identifier>
.
                        <field_identifier type="field" position="([151, 30] - [151, 34]">node</field_identifier>
</field_expression>

                      <arguments type="arguments" position="([151, 34] - [151, 36]">()</arguments>
</call_expression>
;</let_declaration>

                  <let_declaration position="([152, 12] - [152, 43]">let
                    <identifier type="pattern" position="([152, 16] - [152, 24]">is_named</identifier>
=
                    <call_expression type="value" position="([152, 27] - [152, 42]">
                      <field_expression type="function" position="([152, 27] - [152, 40]">
                        <identifier type="value" position="([152, 27] - [152, 31]">node</identifier>
.
                        <field_identifier type="field" position="([152, 32] - [152, 40]">is_named</field_identifier>
</field_expression>

                      <arguments type="arguments" position="([152, 40] - [152, 42]">()</arguments>
</call_expression>
;</let_declaration>

                  <expression_statement position="([153, 12] - [207, 13]">
                    <if_expression position="([153, 12] - [207, 13]">if
                      <identifier type="condition" position="([153, 15] - [153, 33]">did_visit_children</identifier>

                      <block type="consequence" position="([153, 34] - [168, 13]">{
                        <expression_statement position="([154, 16] - [159, 17]">
                          <if_expression position="([154, 16] - [159, 17]">if
                            <identifier type="condition" position="([154, 19] - [154, 27]">is_named</identifier>

                            <block type="consequence" position="([154, 28] - [159, 17]">{
                              <expression_statement position="([155, 20] - [157, 23]">
                                <call_expression position="([155, 20] - [157, 22]">
                                  <field_expression type="function" position="([155, 20] - [155, 53]">
                                    <call_expression type="value" position="([155, 20] - [155, 38]">
                                      <field_expression type="function" position="([155, 20] - [155, 32]">
                                        <identifier type="value" position="([155, 20] - [155, 26]">stdout</identifier>
.
                                        <field_identifier type="field" position="([155, 27] - [155, 32]">write</field_identifier>
</field_expression>

                                      <arguments type="arguments" position="([155, 32] - [155, 38]">(
                                        <string_literal position="([155, 33] - [155, 37]">b""</string_literal>
)</arguments>
</call_expression>
.
                                    <field_identifier type="field" position="([155, 39] - [155, 53]">unwrap_or_else</field_identifier>
</field_expression>

                                  <arguments type="arguments" position="([155, 53] - [157, 22]">(
                                    <closure_expression position="([155, 54] - [157, 21]">
                                      <closure_parameters type="parameters" position="([155, 54] - [155, 59]">|
                                        <identifier position="([155, 55] - [155, 58]">err</identifier>
|</closure_parameters>

                                      <block type="body" position="([155, 60] - [157, 21]">{
                                        <expression_statement position="([156, 24] - [156, 63]">
                                          <macro_invocation position="([156, 24] - [156, 62]">
                                            <identifier type="macro" position="([156, 24] - [156, 34]">error_exit</identifier>
!
                                            <token_tree position="([156, 35] - [156, 62]">(
                                              <string_literal position="([156, 36] - [156, 56]">""</string_literal>

                                              <identifier position="([156, 58] - [156, 61]">err</identifier>
)</token_tree>
</macro_invocation>
;</expression_statement>
}</block>
</closure_expression>
)</arguments>
</call_expression>
;</expression_statement>

                              <expression_statement position="([158, 20] - [158, 41]">
                                <assignment_expression position="([158, 20] - [158, 40]">
                                  <identifier type="left" position="([158, 20] - [158, 33]">needs_newline</identifier>
=
                                  <boolean_literal type="right" position="([158, 36] - [158, 40]">true</boolean_literal>
</assignment_expression>
;</expression_statement>
}</block>
</if_expression>
</expression_statement>

                        <expression_statement position="([160, 16] - [167, 17]">
                          <if_expression position="([160, 16] - [167, 17]">if
                            <call_expression type="condition" position="([160, 19] - [160, 45]">
                              <field_expression type="function" position="([160, 19] - [160, 43]">
                                <identifier type="value" position="([160, 19] - [160, 25]">cursor</identifier>
.
                                <field_identifier type="field" position="([160, 26] - [160, 43]">goto_next_sibling</field_identifier>
</field_expression>

                              <arguments type="arguments" position="([160, 43] - [160, 45]">()</arguments>
</call_expression>

                            <block type="consequence" position="([160, 46] - [162, 17]">{
                              <expression_statement position="([161, 20] - [161, 47]">
                                <assignment_expression position="([161, 20] - [161, 46]">
                                  <identifier type="left" position="([161, 20] - [161, 38]">did_visit_children</identifier>
=
                                  <boolean_literal type="right" position="([161, 41] - [161, 46]">false</boolean_literal>
</assignment_expression>
;</expression_statement>
}</block>

                            <else_clause type="alternative" position="([162, 18] - [167, 17]">else
                              <if_expression position="([162, 23] - [167, 17]">if
                                <call_expression type="condition" position="([162, 26] - [162, 46]">
                                  <field_expression type="function" position="([162, 26] - [162, 44]">
                                    <identifier type="value" position="([162, 26] - [162, 32]">cursor</identifier>
.
                                    <field_identifier type="field" position="([162, 33] - [162, 44]">goto_parent</field_identifier>
</field_expression>

                                  <arguments type="arguments" position="([162, 44] - [162, 46]">()</arguments>
</call_expression>

                                <block type="consequence" position="([162, 47] - [165, 17]">{
                                  <expression_statement position="([163, 20] - [163, 46]">
                                    <assignment_expression position="([163, 20] - [163, 45]">
                                      <identifier type="left" position="([163, 20] - [163, 38]">did_visit_children</identifier>
=
                                      <boolean_literal type="right" position="([163, 41] - [163, 45]">true</boolean_literal>
</assignment_expression>
;</expression_statement>

                                  <expression_statement position="([164, 20] - [164, 38]">
                                    <compound_assignment_expr position="([164, 20] - [164, 37]">
                                      <identifier type="left" position="([164, 20] - [164, 32]">indent_level</identifier>
-=
                                      <integer_literal type="right" position="([164, 36] - [164, 37]">1</integer_literal>
</compound_assignment_expr>
;</expression_statement>
}</block>

                                <else_clause type="alternative" position="([165, 18] - [167, 17]">else
                                  <block position="([165, 23] - [167, 17]">{
                                    <expression_statement position="([166, 20] - [166, 26]">
                                      <break_expression position="([166, 20] - [166, 25]">break</break_expression>
;</expression_statement>
}</block>
</else_clause>
</if_expression>
</else_clause>
</if_expression>
</expression_statement>
}</block>

                      <else_clause type="alternative" position="([168, 14] - [207, 13]">else
                        <block position="([168, 19] - [207, 13]">{
                          <expression_statement position="([169, 16] - [200, 17]">
                            <if_expression position="([169, 16] - [200, 17]">if
                              <identifier type="condition" position="([169, 19] - [169, 27]">is_named</identifier>

                              <block type="consequence" position="([169, 28] - [200, 17]">{
                                <expression_statement position="([170, 20] - [174, 21]">
                                  <if_expression position="([170, 20] - [174, 21]">if
                                    <identifier type="condition" position="([170, 23] - [170, 36]">needs_newline</identifier>

                                    <block type="consequence" position="([170, 37] - [174, 21]">{
                                      <expression_statement position="([171, 24] - [173, 27]">
                                        <call_expression position="([171, 24] - [173, 26]">
                                          <field_expression type="function" position="([171, 24] - [171, 58]">
                                            <call_expression type="value" position="([171, 24] - [171, 43]">
                                              <field_expression type="function" position="([171, 24] - [171, 36]">
                                                <identifier type="value" position="([171, 24] - [171, 30]">stdout</identifier>
.
                                                <field_identifier type="field" position="([171, 31] - [171, 36]">write</field_identifier>
</field_expression>

                                              <arguments type="arguments" position="([171, 36] - [171, 43]">(
                                                <string_literal position="([171, 37] - [171, 42]">b"
                                                  <escape_sequence position="([171, 39] - [171, 41]">\n</escape_sequence>
"</string_literal>
)</arguments>
</call_expression>
.
                                            <field_identifier type="field" position="([171, 44] - [171, 58]">unwrap_or_else</field_identifier>
</field_expression>

                                          <arguments type="arguments" position="([171, 58] - [173, 26]">(
                                            <closure_expression position="([171, 59] - [173, 25]">
                                              <closure_parameters type="parameters" position="([171, 59] - [171, 64]">|
                                                <identifier position="([171, 60] - [171, 63]">err</identifier>
|</closure_parameters>

                                              <block type="body" position="([171, 65] - [173, 25]">{
                                                <expression_statement position="([172, 28] - [172, 67]">
                                                  <macro_invocation position="([172, 28] - [172, 66]">
                                                    <identifier type="macro" position="([172, 28] - [172, 38]">error_exit</identifier>
!
                                                    <token_tree position="([172, 39] - [172, 66]">(
                                                      <string_literal position="([172, 40] - [172, 60]">""</string_literal>

                                                      <identifier position="([172, 62] - [172, 65]">err</identifier>
)</token_tree>
</macro_invocation>
;</expression_statement>
}</block>
</closure_expression>
)</arguments>
</call_expression>
;</expression_statement>
}</block>
</if_expression>
</expression_statement>

                                <expression_statement position="([175, 20] - [179, 21]">
                                  <for_expression position="([175, 20] - [179, 21]">for_in
                                    <range_expression type="value" position="([175, 29] - [175, 44]">
                                      <integer_literal position="([175, 29] - [175, 30]">0</integer_literal>
..
                                      <identifier position="([175, 32] - [175, 44]">indent_level</identifier>
</range_expression>

                                    <block type="body" position="([175, 45] - [179, 21]">{
                                      <expression_statement position="([176, 24] - [178, 27]">
                                        <call_expression position="([176, 24] - [178, 26]">
                                          <field_expression type="function" position="([176, 24] - [176, 58]">
                                            <call_expression type="value" position="([176, 24] - [176, 43]">
                                              <field_expression type="function" position="([176, 24] - [176, 36]">
                                                <identifier type="value" position="([176, 24] - [176, 30]">stdout</identifier>
.
                                                <field_identifier type="field" position="([176, 31] - [176, 36]">write</field_identifier>
</field_expression>

                                              <arguments type="arguments" position="([176, 36] - [176, 43]">(
                                                <string_literal position="([176, 37] - [176, 42]">b""</string_literal>
)</arguments>
</call_expression>
.
                                            <field_identifier type="field" position="([176, 44] - [176, 58]">unwrap_or_else</field_identifier>
</field_expression>

                                          <arguments type="arguments" position="([176, 58] - [178, 26]">(
                                            <closure_expression position="([176, 59] - [178, 25]">
                                              <closure_parameters type="parameters" position="([176, 59] - [176, 64]">|
                                                <identifier position="([176, 60] - [176, 63]">err</identifier>
|</closure_parameters>

                                              <block type="body" position="([176, 65] - [178, 25]">{
                                                <expression_statement position="([177, 28] - [177, 67]">
                                                  <macro_invocation position="([177, 28] - [177, 66]">
                                                    <identifier type="macro" position="([177, 28] - [177, 38]">error_exit</identifier>
!
                                                    <token_tree position="([177, 39] - [177, 66]">(
                                                      <string_literal position="([177, 40] - [177, 60]">""</string_literal>

                                                      <identifier position="([177, 62] - [177, 65]">err</identifier>
)</token_tree>
</macro_invocation>
;</expression_statement>
}</block>
</closure_expression>
)</arguments>
</call_expression>
;</expression_statement>
}</block>
</for_expression>
</expression_statement>

                                <let_declaration position="([180, 20] - [180, 61]">let
                                  <identifier type="pattern" position="([180, 24] - [180, 29]">start</identifier>
:
                                  <type_identifier type="type" position="([180, 31] - [180, 36]">Point</type_identifier>
=
                                  <call_expression type="value" position="([180, 39] - [180, 60]">
                                    <field_expression type="function" position="([180, 39] - [180, 58]">
                                      <identifier type="value" position="([180, 39] - [180, 43]">node</identifier>
.
                                      <field_identifier type="field" position="([180, 44] - [180, 58]">start_position</field_identifier>
</field_expression>

                                    <arguments type="arguments" position="([180, 58] - [180, 60]">()</arguments>
</call_expression>
;</let_declaration>

                                <let_declaration position="([181, 20] - [181, 57]">let
                                  <identifier type="pattern" position="([181, 24] - [181, 27]">end</identifier>
:
                                  <type_identifier type="type" position="([181, 29] - [181, 34]">Point</type_identifier>
=
                                  <call_expression type="value" position="([181, 37] - [181, 56]">
                                    <field_expression type="function" position="([181, 37] - [181, 54]">
                                      <identifier type="value" position="([181, 37] - [181, 41]">node</identifier>
.
                                      <field_identifier type="field" position="([181, 42] - [181, 54]">end_position</field_identifier>
</field_expression>

                                    <arguments type="arguments" position="([181, 54] - [181, 56]">()</arguments>
</call_expression>
;</let_declaration>

                                <expression_statement position="([182, 20] - [186, 21]">
                                  <if_expression position="([182, 20] - [186, 21]">if
                                    <let_condition type="condition" position="([182, 23] - [182, 65]">let
                                      <tuple_struct_pattern type="pattern" position="([182, 27] - [182, 43]">
                                        <identifier type="type" position="([182, 27] - [182, 31]">Some</identifier>
(
                                        <identifier position="([182, 32] - [182, 42]">field_name</identifier>
)</tuple_struct_pattern>
=
                                      <call_expression type="value" position="([182, 46] - [182, 65]">
                                        <field_expression type="function" position="([182, 46] - [182, 63]">
                                          <identifier type="value" position="([182, 46] - [182, 52]">cursor</identifier>
.
                                          <field_identifier type="field" position="([182, 53] - [182, 63]">field_name</field_identifier>
</field_expression>

                                        <arguments type="arguments" position="([182, 63] - [182, 65]">()</arguments>
</call_expression>
</let_condition>

                                    <block type="consequence" position="([182, 66] - [186, 21]">{
                                      <expression_statement position="([183, 24] - [185, 27]">
                                        <call_expression position="([183, 24] - [185, 26]">
                                          <field_expression type="function" position="([183, 24] - [183, 78]">
                                            <macro_invocation type="value" position="([183, 24] - [183, 63]">
                                              <identifier type="macro" position="([183, 24] - [183, 29]">write</identifier>
!
                                              <token_tree position="([183, 30] - [183, 63]">(
                                                <mutable_specifier position="([183, 32] - [183, 35]">mut</mutable_specifier>

                                                <identifier position="([183, 36] - [183, 42]">stdout</identifier>

                                                <string_literal position="([183, 44] - [183, 50]">""</string_literal>

                                                <identifier position="([183, 52] - [183, 62]">field_name</identifier>
)</token_tree>
</macro_invocation>
.
                                            <field_identifier type="field" position="([183, 64] - [183, 78]">unwrap_or_else</field_identifier>
</field_expression>

                                          <arguments type="arguments" position="([183, 78] - [185, 26]">(
                                            <closure_expression position="([183, 79] - [185, 25]">
                                              <closure_parameters type="parameters" position="([183, 79] - [183, 84]">|
                                                <identifier position="([183, 80] - [183, 83]">err</identifier>
|</closure_parameters>

                                              <block type="body" position="([183, 85] - [185, 25]">{
                                                <expression_statement position="([184, 28] - [184, 67]">
                                                  <macro_invocation position="([184, 28] - [184, 66]">
                                                    <identifier type="macro" position="([184, 28] - [184, 38]">error_exit</identifier>
!
                                                    <token_tree position="([184, 39] - [184, 66]">(
                                                      <string_literal position="([184, 40] - [184, 60]">""</string_literal>

                                                      <identifier position="([184, 62] - [184, 65]">err</identifier>
)</token_tree>
</macro_invocation>
;</expression_statement>
}</block>
</closure_expression>
)</arguments>
</call_expression>
;</expression_statement>
}</block>
</if_expression>
</expression_statement>

                                <expression_statement position="([187, 20] - [198, 23]">
                                  <call_expression position="([187, 20] - [198, 22]">
                                    <field_expression type="function" position="([187, 20] - [196, 35]">
                                      <macro_invocation type="value" position="([187, 20] - [195, 21]">
                                        <identifier type="macro" position="([187, 20] - [187, 25]">write</identifier>
!
                                        <token_tree position="([187, 26] - [195, 21]">(
                                          <mutable_specifier position="([188, 25] - [188, 28]">mut</mutable_specifier>

                                          <identifier position="([188, 29] - [188, 35]">stdout</identifier>

                                          <string_literal position="([189, 24] - [189, 49]">""</string_literal>

                                          <identifier position="([190, 24] - [190, 28]">node</identifier>

                                          <identifier position="([190, 29] - [190, 33]">kind</identifier>

                                          <token_tree position="([190, 33] - [190, 35]">()</token_tree>

                                          <identifier position="([191, 24] - [191, 29]">start</identifier>

                                          <identifier position="([191, 30] - [191, 33]">row</identifier>

                                          <identifier position="([192, 24] - [192, 29]">start</identifier>

                                          <identifier position="([192, 30] - [192, 36]">column</identifier>

                                          <identifier position="([193, 24] - [193, 27]">end</identifier>

                                          <identifier position="([193, 28] - [193, 31]">row</identifier>

                                          <identifier position="([194, 24] - [194, 27]">end</identifier>

                                          <identifier position="([194, 28] - [194, 34]">column</identifier>
)</token_tree>
</macro_invocation>
.
                                      <field_identifier type="field" position="([196, 21] - [196, 35]">unwrap_or_else</field_identifier>
</field_expression>

                                    <arguments type="arguments" position="([196, 35] - [198, 22]">(
                                      <closure_expression position="([196, 36] - [198, 21]">
                                        <closure_parameters type="parameters" position="([196, 36] - [196, 41]">|
                                          <identifier position="([196, 37] - [196, 40]">err</identifier>
|</closure_parameters>

                                        <block type="body" position="([196, 42] - [198, 21]">{
                                          <expression_statement position="([197, 24] - [197, 63]">
                                            <macro_invocation position="([197, 24] - [197, 62]">
                                              <identifier type="macro" position="([197, 24] - [197, 34]">error_exit</identifier>
!
                                              <token_tree position="([197, 35] - [197, 62]">(
                                                <string_literal position="([197, 36] - [197, 56]">""</string_literal>

                                                <identifier position="([197, 58] - [197, 61]">err</identifier>
)</token_tree>
</macro_invocation>
;</expression_statement>
}</block>
</closure_expression>
)</arguments>
</call_expression>
;</expression_statement>

                                <expression_statement position="([199, 20] - [199, 41]">
                                  <assignment_expression position="([199, 20] - [199, 40]">
                                    <identifier type="left" position="([199, 20] - [199, 33]">needs_newline</identifier>
=
                                    <boolean_literal type="right" position="([199, 36] - [199, 40]">true</boolean_literal>
</assignment_expression>
;</expression_statement>
}</block>
</if_expression>
</expression_statement>

                          <expression_statement position="([201, 16] - [206, 17]">
                            <if_expression position="([201, 16] - [206, 17]">if
                              <call_expression type="condition" position="([201, 19] - [201, 44]">
                                <field_expression type="function" position="([201, 19] - [201, 42]">
                                  <identifier type="value" position="([201, 19] - [201, 25]">cursor</identifier>
.
                                  <field_identifier type="field" position="([201, 26] - [201, 42]">goto_first_child</field_identifier>
</field_expression>

                                <arguments type="arguments" position="([201, 42] - [201, 44]">()</arguments>
</call_expression>

                              <block type="consequence" position="([201, 45] - [204, 17]">{
                                <expression_statement position="([202, 20] - [202, 47]">
                                  <assignment_expression position="([202, 20] - [202, 46]">
                                    <identifier type="left" position="([202, 20] - [202, 38]">did_visit_children</identifier>
=
                                    <boolean_literal type="right" position="([202, 41] - [202, 46]">false</boolean_literal>
</assignment_expression>
;</expression_statement>

                                <expression_statement position="([203, 20] - [203, 38]">
                                  <compound_assignment_expr position="([203, 20] - [203, 37]">
                                    <identifier type="left" position="([203, 20] - [203, 32]">indent_level</identifier>
+=
                                    <integer_literal type="right" position="([203, 36] - [203, 37]">1</integer_literal>
</compound_assignment_expr>
;</expression_statement>
}</block>

                              <else_clause type="alternative" position="([204, 18] - [206, 17]">else
                                <block position="([204, 23] - [206, 17]">{
                                  <expression_statement position="([205, 20] - [205, 46]">
                                    <assignment_expression position="([205, 20] - [205, 45]">
                                      <identifier type="left" position="([205, 20] - [205, 38]">did_visit_children</identifier>
=
                                      <boolean_literal type="right" position="([205, 41] - [205, 45]">true</boolean_literal>
</assignment_expression>
;</expression_statement>
}</block>
</else_clause>
</if_expression>
</expression_statement>
}</block>
</else_clause>
</if_expression>
</expression_statement>
}</block>
</loop_expression>
</expression_statement>

            <expression_statement position="([209, 8] - [209, 39]">
              <call_expression position="([209, 8] - [209, 38]">
                <field_expression type="function" position="([209, 8] - [209, 20]">
                  <identifier type="value" position="([209, 8] - [209, 14]">cursor</identifier>
.
                  <field_identifier type="field" position="([209, 15] - [209, 20]">reset</field_identifier>
</field_expression>

                <arguments type="arguments" position="([209, 20] - [209, 38]">(
                  <call_expression position="([209, 21] - [209, 37]">
                    <field_expression type="function" position="([209, 21] - [209, 35]">
                      <identifier type="value" position="([209, 21] - [209, 25]">tree</identifier>
.
                      <field_identifier type="field" position="([209, 26] - [209, 35]">root_node</field_identifier>
</field_expression>

                    <arguments type="arguments" position="([209, 35] - [209, 37]">()</arguments>
</call_expression>
)</arguments>
</call_expression>
;</expression_statement>

            <expression_statement position="([210, 8] - [210, 21]">
              <macro_invocation position="([210, 8] - [210, 20]">
                <identifier type="macro" position="([210, 8] - [210, 15]">println</identifier>
!
                <token_tree position="([210, 16] - [210, 20]">(
                  <string_literal position="([210, 17] - [210, 19]">""</string_literal>
)</token_tree>
</macro_invocation>
;</expression_statement>
}</block>
</if_expression>
</expression_statement>

      <expression_statement position="([213, 4] - [299, 5]">
        <if_expression position="([213, 4] - [299, 5]">if
          <binary_expression type="condition" position="([213, 7] - [213, 22]">
            <identifier type="left" position="([213, 7] - [213, 13]">format</identifier>
==
            <string_literal type="right" position="([213, 17] - [213, 22]">""</string_literal>
</binary_expression>

          <block type="consequence" position="([213, 23] - [299, 5]">{
            <let_declaration position="([214, 8] - [214, 44]">let
              <mutable_specifier position="([214, 12] - [214, 15]">mut</mutable_specifier>

              <identifier type="pattern" position="([214, 16] - [214, 29]">needs_newline</identifier>
:
              <primitive_type type="type" position="([214, 31] - [214, 35]">bool</primitive_type>
=
              <boolean_literal type="value" position="([214, 38] - [214, 43]">false</boolean_literal>
;</let_declaration>

            <let_declaration position="([215, 8] - [215, 38]">let
              <mutable_specifier position="([215, 12] - [215, 15]">mut</mutable_specifier>

              <identifier type="pattern" position="([215, 16] - [215, 28]">indent_level</identifier>
:
              <primitive_type type="type" position="([215, 30] - [215, 33]">i32</primitive_type>
=
              <integer_literal type="value" position="([215, 36] - [215, 37]">0</integer_literal>
;</let_declaration>

            <let_declaration position="([216, 8] - [216, 49]">let
              <mutable_specifier position="([216, 12] - [216, 15]">mut</mutable_specifier>

              <identifier type="pattern" position="([216, 16] - [216, 34]">did_visit_children</identifier>
:
              <primitive_type type="type" position="([216, 36] - [216, 40]">bool</primitive_type>
=
              <boolean_literal type="value" position="([216, 43] - [216, 48]">false</boolean_literal>
;</let_declaration>

            <let_declaration position="([217, 8] - [217, 45]">let
              <mutable_specifier position="([217, 12] - [217, 15]">mut</mutable_specifier>

              <identifier type="pattern" position="([217, 16] - [217, 20]">tags</identifier>
:
              <generic_type type="type" position="([217, 22] - [217, 31]">
                <type_identifier type="type" position="([217, 22] - [217, 25]">Vec</type_identifier>

                <type_arguments type="type_arguments" position="([217, 25] - [217, 31]">&lt;
                  <reference_type position="([217, 26] - [217, 30]">&amp;
                    <primitive_type type="type" position="([217, 27] - [217, 30]">str</primitive_type>
</reference_type>
&gt;</type_arguments>
</generic_type>
=
              <call_expression type="value" position="([217, 34] - [217, 44]">
                <scoped_identifier type="function" position="([217, 34] - [217, 42]">
                  <identifier type="path" position="([217, 34] - [217, 37]">Vec</identifier>
::
                  <identifier type="name" position="([217, 39] - [217, 42]">new</identifier>
</scoped_identifier>

                <arguments type="arguments" position="([217, 42] - [217, 44]">()</arguments>
</call_expression>
;</let_declaration>

            <expression_statement position="([218, 8] - [296, 9]">
              <loop_expression position="([218, 8] - [296, 9]">loop
                <block type="body" position="([218, 13] - [296, 9]">{
                  <let_declaration position="([219, 12] - [219, 60]">let
                    <identifier type="pattern" position="([219, 16] - [219, 20]">node</identifier>
:
                    <generic_type type="type" position="([219, 22] - [219, 43]">
                      <scoped_type_identifier type="type" position="([219, 22] - [219, 39]">
                        <identifier type="path" position="([219, 22] - [219, 33]">tree_sitter</identifier>
::
                        <type_identifier type="name" position="([219, 35] - [219, 39]">Node</type_identifier>
</scoped_type_identifier>

                      <type_arguments type="type_arguments" position="([219, 39] - [219, 43]">&lt;
                        <lifetime position="([219, 40] - [219, 42]">'
                          <identifier position="([219, 41] - [219, 42]">_</identifier>
</lifetime>
&gt;</type_arguments>
</generic_type>
=
                    <call_expression type="value" position="([219, 46] - [219, 59]">
                      <field_expression type="function" position="([219, 46] - [219, 57]">
                        <identifier type="value" position="([219, 46] - [219, 52]">cursor</identifier>
.
                        <field_identifier type="field" position="([219, 53] - [219, 57]">node</field_identifier>
</field_expression>

                      <arguments type="arguments" position="([219, 57] - [219, 59]">()</arguments>
</call_expression>
;</let_declaration>

                  <let_declaration position="([220, 12] - [220, 49]">let
                    <identifier type="pattern" position="([220, 16] - [220, 24]">is_named</identifier>
:
                    <primitive_type type="type" position="([220, 26] - [220, 30]">bool</primitive_type>
=
                    <call_expression type="value" position="([220, 33] - [220, 48]">
                      <field_expression type="function" position="([220, 33] - [220, 46]">
                        <identifier type="value" position="([220, 33] - [220, 37]">node</identifier>
.
                        <field_identifier type="field" position="([220, 38] - [220, 46]">is_named</field_identifier>
</field_expression>

                      <arguments type="arguments" position="([220, 46] - [220, 48]">()</arguments>
</call_expression>
;</let_declaration>

                  <expression_statement position="([221, 12] - [295, 13]">
                    <if_expression position="([221, 12] - [295, 13]">if
                      <identifier type="condition" position="([221, 15] - [221, 33]">did_visit_children</identifier>

                      <block type="consequence" position="([221, 34] - [239, 13]">{
                        <expression_statement position="([222, 16] - [230, 17]">
                          <if_expression position="([222, 16] - [230, 17]">if
                            <identifier type="condition" position="([222, 19] - [222, 27]">is_named</identifier>

                            <block type="consequence" position="([222, 28] - [230, 17]">{
                              <let_declaration position="([223, 20] - [223, 55]">let
                                <identifier type="pattern" position="([223, 24] - [223, 27]">tag</identifier>
:
                                <generic_type type="type" position="([223, 29] - [223, 41]">
                                  <type_identifier type="type" position="([223, 29] - [223, 35]">Option</type_identifier>

                                  <type_arguments type="type_arguments" position="([223, 35] - [223, 41]">&lt;
                                    <reference_type position="([223, 36] - [223, 40]">&amp;
                                      <primitive_type type="type" position="([223, 37] - [223, 40]">str</primitive_type>
</reference_type>
&gt;</type_arguments>
</generic_type>
=
                                <call_expression type="value" position="([223, 44] - [223, 54]">
                                  <field_expression type="function" position="([223, 44] - [223, 52]">
                                    <identifier type="value" position="([223, 44] - [223, 48]">tags</identifier>
.
                                    <field_identifier type="field" position="([223, 49] - [223, 52]">pop</field_identifier>
</field_expression>

                                  <arguments type="arguments" position="([223, 52] - [223, 54]">()</arguments>
</call_expression>
;</let_declaration>

                              <expression_statement position="([224, 20] - [228, 22]">
                                <call_expression position="([224, 20] - [228, 21]">
                                  <field_expression type="function" position="([224, 20] - [224, 95]">
                                    <macro_invocation type="value" position="([224, 20] - [224, 80]">
                                      <identifier type="macro" position="([224, 20] - [224, 25]">write</identifier>
!
                                      <token_tree position="([224, 26] - [224, 80]">(
                                        <mutable_specifier position="([224, 28] - [224, 31]">mut</mutable_specifier>

                                        <identifier position="([224, 32] - [224, 38]">stdout</identifier>

                                        <string_literal position="([224, 40] - [224, 49]">"
                                          <escape_sequence position="([224, 46] - [224, 48]">\n</escape_sequence>
"</string_literal>

                                        <identifier position="([224, 51] - [224, 54]">tag</identifier>

                                        <identifier position="([224, 55] - [224, 61]">expect</identifier>

                                        <token_tree position="([224, 61] - [224, 79]">(
                                          <string_literal position="([224, 62] - [224, 78]">""</string_literal>
)</token_tree>
)</token_tree>
</macro_invocation>
.
                                    <field_identifier type="field" position="([224, 81] - [224, 95]">unwrap_or_else</field_identifier>
</field_expression>

                                  <arguments type="arguments" position="([224, 95] - [228, 21]">(
                                    <closure_expression position="([225, 24] - [227, 25]">
                                      <closure_parameters type="parameters" position="([225, 24] - [225, 40]">|
                                        <parameter position="([225, 25] - [225, 39]">
                                          <identifier type="pattern" position="([225, 25] - [225, 28]">err</identifier>
:
                                          <scoped_type_identifier type="type" position="([225, 30] - [225, 39]">
                                            <identifier type="path" position="([225, 30] - [225, 32]">io</identifier>
::
                                            <type_identifier type="name" position="([225, 34] - [225, 39]">Error</type_identifier>
</scoped_type_identifier>
</parameter>
|</closure_parameters>

                                      <block type="body" position="([225, 41] - [227, 25]">{
                                        <expression_statement position="([226, 28] - [226, 67]">
                                          <macro_invocation position="([226, 28] - [226, 66]">
                                            <identifier type="macro" position="([226, 28] - [226, 38]">error_exit</identifier>
!
                                            <token_tree position="([226, 39] - [226, 66]">(
                                              <string_literal position="([226, 40] - [226, 60]">""</string_literal>

                                              <identifier position="([226, 62] - [226, 65]">err</identifier>
)</token_tree>
</macro_invocation>
;</expression_statement>
}</block>
</closure_expression>
,)</arguments>
</call_expression>
;</expression_statement>

                              <expression_statement position="([229, 20] - [229, 41]">
                                <assignment_expression position="([229, 20] - [229, 40]">
                                  <identifier type="left" position="([229, 20] - [229, 33]">needs_newline</identifier>
=
                                  <boolean_literal type="right" position="([229, 36] - [229, 40]">true</boolean_literal>
</assignment_expression>
;</expression_statement>
}</block>
</if_expression>
</expression_statement>

                        <expression_statement position="([231, 16] - [238, 17]">
                          <if_expression position="([231, 16] - [238, 17]">if
                            <call_expression type="condition" position="([231, 19] - [231, 45]">
                              <field_expression type="function" position="([231, 19] - [231, 43]">
                                <identifier type="value" position="([231, 19] - [231, 25]">cursor</identifier>
.
                                <field_identifier type="field" position="([231, 26] - [231, 43]">goto_next_sibling</field_identifier>
</field_expression>

                              <arguments type="arguments" position="([231, 43] - [231, 45]">()</arguments>
</call_expression>

                            <block type="consequence" position="([231, 46] - [233, 17]">{
                              <expression_statement position="([232, 20] - [232, 47]">
                                <assignment_expression position="([232, 20] - [232, 46]">
                                  <identifier type="left" position="([232, 20] - [232, 38]">did_visit_children</identifier>
=
                                  <boolean_literal type="right" position="([232, 41] - [232, 46]">false</boolean_literal>
</assignment_expression>
;</expression_statement>
}</block>

                            <else_clause type="alternative" position="([233, 18] - [238, 17]">else
                              <if_expression position="([233, 23] - [238, 17]">if
                                <call_expression type="condition" position="([233, 26] - [233, 46]">
                                  <field_expression type="function" position="([233, 26] - [233, 44]">
                                    <identifier type="value" position="([233, 26] - [233, 32]">cursor</identifier>
.
                                    <field_identifier type="field" position="([233, 33] - [233, 44]">goto_parent</field_identifier>
</field_expression>

                                  <arguments type="arguments" position="([233, 44] - [233, 46]">()</arguments>
</call_expression>

                                <block type="consequence" position="([233, 47] - [236, 17]">{
                                  <expression_statement position="([234, 20] - [234, 46]">
                                    <assignment_expression position="([234, 20] - [234, 45]">
                                      <identifier type="left" position="([234, 20] - [234, 38]">did_visit_children</identifier>
=
                                      <boolean_literal type="right" position="([234, 41] - [234, 45]">true</boolean_literal>
</assignment_expression>
;</expression_statement>

                                  <expression_statement position="([235, 20] - [235, 38]">
                                    <compound_assignment_expr position="([235, 20] - [235, 37]">
                                      <identifier type="left" position="([235, 20] - [235, 32]">indent_level</identifier>
-=
                                      <integer_literal type="right" position="([235, 36] - [235, 37]">1</integer_literal>
</compound_assignment_expr>
;</expression_statement>
}</block>

                                <else_clause type="alternative" position="([236, 18] - [238, 17]">else
                                  <block position="([236, 23] - [238, 17]">{
                                    <expression_statement position="([237, 20] - [237, 26]">
                                      <break_expression position="([237, 20] - [237, 25]">break</break_expression>
;</expression_statement>
}</block>
</else_clause>
</if_expression>
</else_clause>
</if_expression>
</expression_statement>
}</block>

                      <else_clause type="alternative" position="([239, 14] - [295, 13]">else
                        <block position="([239, 19] - [295, 13]">{
                          <expression_statement position="([240, 16] - [279, 17]">
                            <if_expression position="([240, 16] - [279, 17]">if
                              <identifier type="condition" position="([240, 19] - [240, 27]">is_named</identifier>

                              <block type="consequence" position="([240, 28] - [279, 17]">{
                                <expression_statement position="([241, 20] - [245, 21]">
                                  <if_expression position="([241, 20] - [245, 21]">if
                                    <identifier type="condition" position="([241, 23] - [241, 36]">needs_newline</identifier>

                                    <block type="consequence" position="([241, 37] - [245, 21]">{
                                      <expression_statement position="([242, 24] - [244, 27]">
                                        <call_expression position="([242, 24] - [244, 26]">
                                          <field_expression type="function" position="([242, 24] - [242, 58]">
                                            <call_expression type="value" position="([242, 24] - [242, 43]">
                                              <field_expression type="function" position="([242, 24] - [242, 36]">
                                                <identifier type="value" position="([242, 24] - [242, 30]">stdout</identifier>
.
                                                <field_identifier type="field" position="([242, 31] - [242, 36]">write</field_identifier>
</field_expression>

                                              <arguments type="arguments" position="([242, 36] - [242, 43]">(
                                                <string_literal position="([242, 37] - [242, 42]">b"
                                                  <escape_sequence position="([242, 39] - [242, 41]">\n</escape_sequence>
"</string_literal>
)</arguments>
</call_expression>
.
                                            <field_identifier type="field" position="([242, 44] - [242, 58]">unwrap_or_else</field_identifier>
</field_expression>

                                          <arguments type="arguments" position="([242, 58] - [244, 26]">(
                                            <closure_expression position="([242, 59] - [244, 25]">
                                              <closure_parameters type="parameters" position="([242, 59] - [242, 75]">|
                                                <parameter position="([242, 60] - [242, 74]">
                                                  <identifier type="pattern" position="([242, 60] - [242, 63]">err</identifier>
:
                                                  <scoped_type_identifier type="type" position="([242, 65] - [242, 74]">
                                                    <identifier type="path" position="([242, 65] - [242, 67]">io</identifier>
::
                                                    <type_identifier type="name" position="([242, 69] - [242, 74]">Error</type_identifier>
</scoped_type_identifier>
</parameter>
|</closure_parameters>

                                              <block type="body" position="([242, 76] - [244, 25]">{
                                                <expression_statement position="([243, 28] - [243, 67]">
                                                  <macro_invocation position="([243, 28] - [243, 66]">
                                                    <identifier type="macro" position="([243, 28] - [243, 38]">error_exit</identifier>
!
                                                    <token_tree position="([243, 39] - [243, 66]">(
                                                      <string_literal position="([243, 40] - [243, 60]">""</string_literal>

                                                      <identifier position="([243, 62] - [243, 65]">err</identifier>
)</token_tree>
</macro_invocation>
;</expression_statement>
}</block>
</closure_expression>
)</arguments>
</call_expression>
;</expression_statement>
}</block>
</if_expression>
</expression_statement>

                                <expression_statement position="([246, 20] - [250, 21]">
                                  <for_expression position="([246, 20] - [250, 21]">for_in
                                    <range_expression type="value" position="([246, 29] - [246, 44]">
                                      <integer_literal position="([246, 29] - [246, 30]">0</integer_literal>
..
                                      <identifier position="([246, 32] - [246, 44]">indent_level</identifier>
</range_expression>

                                    <block type="body" position="([246, 45] - [250, 21]">{
                                      <expression_statement position="([247, 24] - [249, 27]">
                                        <call_expression position="([247, 24] - [249, 26]">
                                          <field_expression type="function" position="([247, 24] - [247, 58]">
                                            <call_expression type="value" position="([247, 24] - [247, 43]">
                                              <field_expression type="function" position="([247, 24] - [247, 36]">
                                                <identifier type="value" position="([247, 24] - [247, 30]">stdout</identifier>
.
                                                <field_identifier type="field" position="([247, 31] - [247, 36]">write</field_identifier>
</field_expression>

                                              <arguments type="arguments" position="([247, 36] - [247, 43]">(
                                                <string_literal position="([247, 37] - [247, 42]">b""</string_literal>
)</arguments>
</call_expression>
.
                                            <field_identifier type="field" position="([247, 44] - [247, 58]">unwrap_or_else</field_identifier>
</field_expression>

                                          <arguments type="arguments" position="([247, 58] - [249, 26]">(
                                            <closure_expression position="([247, 59] - [249, 25]">
                                              <closure_parameters type="parameters" position="([247, 59] - [247, 75]">|
                                                <parameter position="([247, 60] - [247, 74]">
                                                  <identifier type="pattern" position="([247, 60] - [247, 63]">err</identifier>
:
                                                  <scoped_type_identifier type="type" position="([247, 65] - [247, 74]">
                                                    <identifier type="path" position="([247, 65] - [247, 67]">io</identifier>
::
                                                    <type_identifier type="name" position="([247, 69] - [247, 74]">Error</type_identifier>
</scoped_type_identifier>
</parameter>
|</closure_parameters>

                                              <block type="body" position="([247, 76] - [249, 25]">{
                                                <expression_statement position="([248, 28] - [248, 67]">
                                                  <macro_invocation position="([248, 28] - [248, 66]">
                                                    <identifier type="macro" position="([248, 28] - [248, 38]">error_exit</identifier>
!
                                                    <token_tree position="([248, 39] - [248, 66]">(
                                                      <string_literal position="([248, 40] - [248, 60]">""</string_literal>

                                                      <identifier position="([248, 62] - [248, 65]">err</identifier>
)</token_tree>
</macro_invocation>
;</expression_statement>
}</block>
</closure_expression>
)</arguments>
</call_expression>
;</expression_statement>
}</block>
</for_expression>
</expression_statement>

                                <expression_statement position="([251, 20] - [253, 23]">
                                  <call_expression position="([251, 20] - [253, 22]">
                                    <field_expression type="function" position="([251, 20] - [251, 74]">
                                      <macro_invocation type="value" position="([251, 20] - [251, 59]">
                                        <identifier type="macro" position="([251, 20] - [251, 25]">write</identifier>
!
                                        <token_tree position="([251, 26] - [251, 59]">(
                                          <mutable_specifier position="([251, 28] - [251, 31]">mut</mutable_specifier>

                                          <identifier position="([251, 32] - [251, 38]">stdout</identifier>

                                          <string_literal position="([251, 40] - [251, 45]">""</string_literal>

                                          <identifier position="([251, 47] - [251, 51]">node</identifier>

                                          <identifier position="([251, 52] - [251, 56]">kind</identifier>

                                          <token_tree position="([251, 56] - [251, 58]">()</token_tree>
)</token_tree>
</macro_invocation>
.
                                      <field_identifier type="field" position="([251, 60] - [251, 74]">unwrap_or_else</field_identifier>
</field_expression>

                                    <arguments type="arguments" position="([251, 74] - [253, 22]">(
                                      <closure_expression position="([251, 75] - [253, 21]">
                                        <closure_parameters type="parameters" position="([251, 75] - [251, 91]">|
                                          <parameter position="([251, 76] - [251, 90]">
                                            <identifier type="pattern" position="([251, 76] - [251, 79]">err</identifier>
:
                                            <scoped_type_identifier type="type" position="([251, 81] - [251, 90]">
                                              <identifier type="path" position="([251, 81] - [251, 83]">io</identifier>
::
                                              <type_identifier type="name" position="([251, 85] - [251, 90]">Error</type_identifier>
</scoped_type_identifier>
</parameter>
|</closure_parameters>

                                        <block type="body" position="([251, 92] - [253, 21]">{
                                          <expression_statement position="([252, 24] - [252, 63]">
                                            <macro_invocation position="([252, 24] - [252, 62]">
                                              <identifier type="macro" position="([252, 24] - [252, 34]">error_exit</identifier>
!
                                              <token_tree position="([252, 35] - [252, 62]">(
                                                <string_literal position="([252, 36] - [252, 56]">""</string_literal>

                                                <identifier position="([252, 58] - [252, 61]">err</identifier>
)</token_tree>
</macro_invocation>
;</expression_statement>
}</block>
</closure_expression>
)</arguments>
</call_expression>
;</expression_statement>

                                <expression_statement position="([254, 20] - [260, 21]">
                                  <if_expression position="([254, 20] - [260, 21]">if
                                    <let_condition type="condition" position="([254, 23] - [254, 65]">let
                                      <tuple_struct_pattern type="pattern" position="([254, 27] - [254, 43]">
                                        <identifier type="type" position="([254, 27] - [254, 31]">Some</identifier>
(
                                        <identifier position="([254, 32] - [254, 42]">field_name</identifier>
)</tuple_struct_pattern>
=
                                      <call_expression type="value" position="([254, 46] - [254, 65]">
                                        <field_expression type="function" position="([254, 46] - [254, 63]">
                                          <identifier type="value" position="([254, 46] - [254, 52]">cursor</identifier>
.
                                          <field_identifier type="field" position="([254, 53] - [254, 63]">field_name</field_identifier>
</field_expression>

                                        <arguments type="arguments" position="([254, 63] - [254, 65]">()</arguments>
</call_expression>
</let_condition>

                                    <block type="consequence" position="([254, 66] - [260, 21]">{
                                      <expression_statement position="([255, 24] - [259, 26]">
                                        <call_expression position="([255, 24] - [259, 25]">
                                          <field_expression type="function" position="([255, 24] - [255, 86]">
                                            <macro_invocation type="value" position="([255, 24] - [255, 71]">
                                              <identifier type="macro" position="([255, 24] - [255, 29]">write</identifier>
!
                                              <token_tree position="([255, 30] - [255, 71]">(
                                                <mutable_specifier position="([255, 32] - [255, 35]">mut</mutable_specifier>

                                                <identifier position="([255, 36] - [255, 42]">stdout</identifier>

                                                <string_literal position="([255, 44] - [255, 58]">"
                                                  <escape_sequence position="([255, 51] - [255, 53]">\"</escape_sequence>

                                                  <escape_sequence position="([255, 55] - [255, 57]">\"</escape_sequence>
"</string_literal>

                                                <identifier position="([255, 60] - [255, 70]">field_name</identifier>
)</token_tree>
</macro_invocation>
.
                                            <field_identifier type="field" position="([255, 72] - [255, 86]">unwrap_or_else</field_identifier>
</field_expression>

                                          <arguments type="arguments" position="([255, 86] - [259, 25]">(
                                            <closure_expression position="([256, 28] - [258, 29]">
                                              <closure_parameters type="parameters" position="([256, 28] - [256, 44]">|
                                                <parameter position="([256, 29] - [256, 43]">
                                                  <identifier type="pattern" position="([256, 29] - [256, 32]">err</identifier>
:
                                                  <scoped_type_identifier type="type" position="([256, 34] - [256, 43]">
                                                    <identifier type="path" position="([256, 34] - [256, 36]">io</identifier>
::
                                                    <type_identifier type="name" position="([256, 38] - [256, 43]">Error</type_identifier>
</scoped_type_identifier>
</parameter>
|</closure_parameters>

                                              <block type="body" position="([256, 45] - [258, 29]">{
                                                <expression_statement position="([257, 32] - [257, 71]">
                                                  <macro_invocation position="([257, 32] - [257, 70]">
                                                    <identifier type="macro" position="([257, 32] - [257, 42]">error_exit</identifier>
!
                                                    <token_tree position="([257, 43] - [257, 70]">(
                                                      <string_literal position="([257, 44] - [257, 64]">""</string_literal>

                                                      <identifier position="([257, 66] - [257, 69]">err</identifier>
)</token_tree>
</macro_invocation>
;</expression_statement>
}</block>
</closure_expression>
,)</arguments>
</call_expression>
;</expression_statement>
}</block>
</if_expression>
</expression_statement>

                                <let_declaration position="([261, 20] - [261, 61]">let
                                  <identifier type="pattern" position="([261, 24] - [261, 29]">start</identifier>
:
                                  <type_identifier type="type" position="([261, 31] - [261, 36]">Point</type_identifier>
=
                                  <call_expression type="value" position="([261, 39] - [261, 60]">
                                    <field_expression type="function" position="([261, 39] - [261, 58]">
                                      <identifier type="value" position="([261, 39] - [261, 43]">node</identifier>
.
                                      <field_identifier type="field" position="([261, 44] - [261, 58]">start_position</field_identifier>
</field_expression>

                                    <arguments type="arguments" position="([261, 58] - [261, 60]">()</arguments>
</call_expression>
;</let_declaration>

                                <let_declaration position="([262, 20] - [262, 57]">let
                                  <identifier type="pattern" position="([262, 24] - [262, 27]">end</identifier>
:
                                  <type_identifier type="type" position="([262, 29] - [262, 34]">Point</type_identifier>
=
                                  <call_expression type="value" position="([262, 37] - [262, 56]">
                                    <field_expression type="function" position="([262, 37] - [262, 54]">
                                      <identifier type="value" position="([262, 37] - [262, 41]">node</identifier>
.
                                      <field_identifier type="field" position="([262, 42] - [262, 54]">end_position</field_identifier>
</field_expression>

                                    <arguments type="arguments" position="([262, 54] - [262, 56]">()</arguments>
</call_expression>
;</let_declaration>

                                <expression_statement position="([263, 20] - [273, 23]">
                                  <call_expression position="([263, 20] - [273, 22]">
                                    <field_expression type="function" position="([263, 20] - [271, 35]">
                                      <macro_invocation type="value" position="([263, 20] - [270, 21]">
                                        <identifier type="macro" position="([263, 20] - [263, 25]">write</identifier>
!
                                        <token_tree position="([263, 26] - [270, 21]">(
                                          <mutable_specifier position="([264, 25] - [264, 28]">mut</mutable_specifier>

                                          <identifier position="([264, 29] - [264, 35]">stdout</identifier>

                                          <string_literal position="([265, 24] - [265, 60]">"
                                            <escape_sequence position="([265, 35] - [265, 37]">\"</escape_sequence>

                                            <escape_sequence position="([265, 57] - [265, 59]">\"</escape_sequence>
"</string_literal>

                                          <identifier position="([266, 24] - [266, 29]">start</identifier>

                                          <identifier position="([266, 30] - [266, 33]">row</identifier>

                                          <identifier position="([267, 24] - [267, 29]">start</identifier>

                                          <identifier position="([267, 30] - [267, 36]">column</identifier>

                                          <identifier position="([268, 24] - [268, 27]">end</identifier>

                                          <identifier position="([268, 28] - [268, 31]">row</identifier>

                                          <identifier position="([269, 24] - [269, 27]">end</identifier>

                                          <identifier position="([269, 28] - [269, 34]">column</identifier>
)</token_tree>
</macro_invocation>
.
                                      <field_identifier type="field" position="([271, 21] - [271, 35]">unwrap_or_else</field_identifier>
</field_expression>

                                    <arguments type="arguments" position="([271, 35] - [273, 22]">(
                                      <closure_expression position="([271, 36] - [273, 21]">
                                        <closure_parameters type="parameters" position="([271, 36] - [271, 41]">|
                                          <identifier position="([271, 37] - [271, 40]">err</identifier>
|</closure_parameters>

                                        <block type="body" position="([271, 42] - [273, 21]">{
                                          <expression_statement position="([272, 24] - [272, 63]">
                                            <macro_invocation position="([272, 24] - [272, 62]">
                                              <identifier type="macro" position="([272, 24] - [272, 34]">error_exit</identifier>
!
                                              <token_tree position="([272, 35] - [272, 62]">(
                                                <string_literal position="([272, 36] - [272, 56]">""</string_literal>

                                                <identifier position="([272, 58] - [272, 61]">err</identifier>
)</token_tree>
</macro_invocation>
;</expression_statement>
}</block>
</closure_expression>
)</arguments>
</call_expression>
;</expression_statement>

                                <expression_statement position="([274, 20] - [276, 23]">
                                  <call_expression position="([274, 20] - [276, 22]">
                                    <field_expression type="function" position="([274, 20] - [274, 59]">
                                      <macro_invocation type="value" position="([274, 20] - [274, 44]">
                                        <identifier type="macro" position="([274, 20] - [274, 25]">write</identifier>
!
                                        <token_tree position="([274, 26] - [274, 44]">(
                                          <mutable_specifier position="([274, 28] - [274, 31]">mut</mutable_specifier>

                                          <identifier position="([274, 32] - [274, 38]">stdout</identifier>

                                          <string_literal position="([274, 40] - [274, 43]">""</string_literal>
)</token_tree>
</macro_invocation>
.
                                      <field_identifier type="field" position="([274, 45] - [274, 59]">unwrap_or_else</field_identifier>
</field_expression>

                                    <arguments type="arguments" position="([274, 59] - [276, 22]">(
                                      <closure_expression position="([274, 60] - [276, 21]">
                                        <closure_parameters type="parameters" position="([274, 60] - [274, 76]">|
                                          <parameter position="([274, 61] - [274, 75]">
                                            <identifier type="pattern" position="([274, 61] - [274, 64]">err</identifier>
:
                                            <scoped_type_identifier type="type" position="([274, 66] - [274, 75]">
                                              <identifier type="path" position="([274, 66] - [274, 68]">io</identifier>
::
                                              <type_identifier type="name" position="([274, 70] - [274, 75]">Error</type_identifier>
</scoped_type_identifier>
</parameter>
|</closure_parameters>

                                        <block type="body" position="([274, 77] - [276, 21]">{
                                          <expression_statement position="([275, 24] - [275, 63]">
                                            <macro_invocation position="([275, 24] - [275, 62]">
                                              <identifier type="macro" position="([275, 24] - [275, 34]">error_exit</identifier>
!
                                              <token_tree position="([275, 35] - [275, 62]">(
                                                <string_literal position="([275, 36] - [275, 56]">""</string_literal>

                                                <identifier position="([275, 58] - [275, 61]">err</identifier>
)</token_tree>
</macro_invocation>
;</expression_statement>
}</block>
</closure_expression>
)</arguments>
</call_expression>
;</expression_statement>

                                <expression_statement position="([277, 20] - [277, 43]">
                                  <call_expression position="([277, 20] - [277, 42]">
                                    <field_expression type="function" position="([277, 20] - [277, 29]">
                                      <identifier type="value" position="([277, 20] - [277, 24]">tags</identifier>
.
                                      <field_identifier type="field" position="([277, 25] - [277, 29]">push</field_identifier>
</field_expression>

                                    <arguments type="arguments" position="([277, 29] - [277, 42]">(
                                      <call_expression position="([277, 30] - [277, 41]">
                                        <field_expression type="function" position="([277, 30] - [277, 39]">
                                          <identifier type="value" position="([277, 30] - [277, 34]">node</identifier>
.
                                          <field_identifier type="field" position="([277, 35] - [277, 39]">kind</field_identifier>
</field_expression>

                                        <arguments type="arguments" position="([277, 39] - [277, 41]">()</arguments>
</call_expression>
)</arguments>
</call_expression>
;</expression_statement>

                                <expression_statement position="([278, 20] - [278, 41]">
                                  <assignment_expression position="([278, 20] - [278, 40]">
                                    <identifier type="left" position="([278, 20] - [278, 33]">needs_newline</identifier>
=
                                    <boolean_literal type="right" position="([278, 36] - [278, 40]">true</boolean_literal>
</assignment_expression>
;</expression_statement>
}</block>
</if_expression>
</expression_statement>

                          <expression_statement position="([280, 16] - [294, 17]">
                            <if_expression position="([280, 16] - [294, 17]">if
                              <call_expression type="condition" position="([280, 19] - [280, 44]">
                                <field_expression type="function" position="([280, 19] - [280, 42]">
                                  <identifier type="value" position="([280, 19] - [280, 25]">cursor</identifier>
.
                                  <field_identifier type="field" position="([280, 26] - [280, 42]">goto_first_child</field_identifier>
</field_expression>

                                <arguments type="arguments" position="([280, 42] - [280, 44]">()</arguments>
</call_expression>

                              <block type="consequence" position="([280, 45] - [283, 17]">{
                                <expression_statement position="([281, 20] - [281, 47]">
                                  <assignment_expression position="([281, 20] - [281, 46]">
                                    <identifier type="left" position="([281, 20] - [281, 38]">did_visit_children</identifier>
=
                                    <boolean_literal type="right" position="([281, 41] - [281, 46]">false</boolean_literal>
</assignment_expression>
;</expression_statement>

                                <expression_statement position="([282, 20] - [282, 38]">
                                  <compound_assignment_expr position="([282, 20] - [282, 37]">
                                    <identifier type="left" position="([282, 20] - [282, 32]">indent_level</identifier>
+=
                                    <integer_literal type="right" position="([282, 36] - [282, 37]">1</integer_literal>
</compound_assignment_expr>
;</expression_statement>
}</block>

                              <else_clause type="alternative" position="([283, 18] - [294, 17]">else
                                <block position="([283, 23] - [294, 17]">{
                                  <expression_statement position="([284, 20] - [284, 46]">
                                    <assignment_expression position="([284, 20] - [284, 45]">
                                      <identifier type="left" position="([284, 20] - [284, 38]">did_visit_children</identifier>
=
                                      <boolean_literal type="right" position="([284, 41] - [284, 45]">true</boolean_literal>
</assignment_expression>
;</expression_statement>

                                  <let_declaration position="([285, 20] - [285, 57]">let
                                    <identifier type="pattern" position="([285, 24] - [285, 29]">start</identifier>
:
                                    <primitive_type type="type" position="([285, 31] - [285, 36]">usize</primitive_type>
=
                                    <call_expression type="value" position="([285, 39] - [285, 56]">
                                      <field_expression type="function" position="([285, 39] - [285, 54]">
                                        <identifier type="value" position="([285, 39] - [285, 43]">node</identifier>
.
                                        <field_identifier type="field" position="([285, 44] - [285, 54]">start_byte</field_identifier>
</field_expression>

                                      <arguments type="arguments" position="([285, 54] - [285, 56]">()</arguments>
</call_expression>
;</let_declaration>

                                  <let_declaration position="([286, 20] - [286, 53]">let
                                    <identifier type="pattern" position="([286, 24] - [286, 27]">end</identifier>
:
                                    <primitive_type type="type" position="([286, 29] - [286, 34]">usize</primitive_type>
=
                                    <call_expression type="value" position="([286, 37] - [286, 52]">
                                      <field_expression type="function" position="([286, 37] - [286, 50]">
                                        <identifier type="value" position="([286, 37] - [286, 41]">node</identifier>
.
                                        <field_identifier type="field" position="([286, 42] - [286, 50]">end_byte</field_identifier>
</field_expression>

                                      <arguments type="arguments" position="([286, 50] - [286, 52]">()</arguments>
</call_expression>
;</let_declaration>

                                  <let_declaration position="([287, 20] - [288, 93]">let
                                    <identifier type="pattern" position="([287, 24] - [287, 29]">value</identifier>
:
                                    <reference_type type="type" position="([287, 31] - [287, 35]">&amp;
                                      <primitive_type type="type" position="([287, 32] - [287, 35]">str</primitive_type>
</reference_type>
=
                                    <call_expression type="value" position="([288, 24] - [288, 92]">
                                      <field_expression type="function" position="([288, 24] - [288, 76]">
                                        <call_expression type="value" position="([288, 24] - [288, 69]">
                                          <scoped_identifier type="function" position="([288, 24] - [288, 43]">
                                            <scoped_identifier type="path" position="([288, 24] - [288, 32]">
                                              <identifier type="path" position="([288, 24] - [288, 27]">std</identifier>
::
                                              <identifier type="name" position="([288, 29] - [288, 32]">str</identifier>
</scoped_identifier>
::
                                            <identifier type="name" position="([288, 34] - [288, 43]">from_utf8</identifier>
</scoped_identifier>

                                          <arguments type="arguments" position="([288, 43] - [288, 69]">(
                                            <reference_expression position="([288, 44] - [288, 68]">&amp;
                                              <index_expression type="value" position="([288, 45] - [288, 68]">
                                                <identifier position="([288, 45] - [288, 56]">source_code</identifier>
[
                                                <range_expression position="([288, 57] - [288, 67]">
                                                  <identifier position="([288, 57] - [288, 62]">start</identifier>
..
                                                  <identifier position="([288, 64] - [288, 67]">end</identifier>
</range_expression>
]</index_expression>
</reference_expression>
)</arguments>
</call_expression>
.
                                        <field_identifier type="field" position="([288, 70] - [288, 76]">expect</field_identifier>
</field_expression>

                                      <arguments type="arguments" position="([288, 76] - [288, 92]">(
                                        <string_literal position="([288, 77] - [288, 91]">""</string_literal>
)</arguments>
</call_expression>
;</let_declaration>

                                  <expression_statement position="([289, 20] - [293, 22]">
                                    <call_expression position="([289, 20] - [293, 21]">
                                      <field_expression type="function" position="([289, 20] - [289, 93]">
                                        <macro_invocation type="value" position="([289, 20] - [289, 78]">
                                          <identifier type="macro" position="([289, 20] - [289, 25]">write</identifier>
!
                                          <token_tree position="([289, 26] - [289, 78]">(
                                            <mutable_specifier position="([289, 28] - [289, 31]">mut</mutable_specifier>

                                            <identifier position="([289, 32] - [289, 38]">stdout</identifier>

                                            <string_literal position="([289, 40] - [289, 44]">""</string_literal>

                                            <identifier position="([289, 46] - [289, 57]">html_escape</identifier>

                                            <identifier position="([289, 59] - [289, 70]">encode_text</identifier>

                                            <token_tree position="([289, 70] - [289, 77]">(
                                              <identifier position="([289, 71] - [289, 76]">value</identifier>
)</token_tree>
)</token_tree>
</macro_invocation>
.
                                        <field_identifier type="field" position="([289, 79] - [289, 93]">unwrap_or_else</field_identifier>
</field_expression>

                                      <arguments type="arguments" position="([289, 93] - [293, 21]">(
                                        <closure_expression position="([290, 24] - [292, 25]">
                                          <closure_parameters type="parameters" position="([290, 24] - [290, 40]">|
                                            <parameter position="([290, 25] - [290, 39]">
                                              <identifier type="pattern" position="([290, 25] - [290, 28]">err</identifier>
:
                                              <scoped_type_identifier type="type" position="([290, 30] - [290, 39]">
                                                <identifier type="path" position="([290, 30] - [290, 32]">io</identifier>
::
                                                <type_identifier type="name" position="([290, 34] - [290, 39]">Error</type_identifier>
</scoped_type_identifier>
</parameter>
|</closure_parameters>

                                          <block type="body" position="([290, 41] - [292, 25]">{
                                            <expression_statement position="([291, 28] - [291, 67]">
                                              <macro_invocation position="([291, 28] - [291, 66]">
                                                <identifier type="macro" position="([291, 28] - [291, 38]">error_exit</identifier>
!
                                                <token_tree position="([291, 39] - [291, 66]">(
                                                  <string_literal position="([291, 40] - [291, 60]">""</string_literal>

                                                  <identifier position="([291, 62] - [291, 65]">err</identifier>
)</token_tree>
</macro_invocation>
;</expression_statement>
}</block>
</closure_expression>
,)</arguments>
</call_expression>
;</expression_statement>
}</block>
</else_clause>
</if_expression>
</expression_statement>
}</block>
</else_clause>
</if_expression>
</expression_statement>
}</block>
</loop_expression>
</expression_statement>

            <expression_statement position="([297, 8] - [297, 39]">
              <call_expression position="([297, 8] - [297, 38]">
                <field_expression type="function" position="([297, 8] - [297, 20]">
                  <identifier type="value" position="([297, 8] - [297, 14]">cursor</identifier>
.
                  <field_identifier type="field" position="([297, 15] - [297, 20]">reset</field_identifier>
</field_expression>

                <arguments type="arguments" position="([297, 20] - [297, 38]">(
                  <call_expression position="([297, 21] - [297, 37]">
                    <field_expression type="function" position="([297, 21] - [297, 35]">
                      <identifier type="value" position="([297, 21] - [297, 25]">tree</identifier>
.
                      <field_identifier type="field" position="([297, 26] - [297, 35]">root_node</field_identifier>
</field_expression>

                    <arguments type="arguments" position="([297, 35] - [297, 37]">()</arguments>
</call_expression>
)</arguments>
</call_expression>
;</expression_statement>

            <expression_statement position="([298, 8] - [298, 21]">
              <macro_invocation position="([298, 8] - [298, 20]">
                <identifier type="macro" position="([298, 8] - [298, 15]">println</identifier>
!
                <token_tree position="([298, 16] - [298, 20]">(
                  <string_literal position="([298, 17] - [298, 19]">""</string_literal>
)</token_tree>
</macro_invocation>
;</expression_statement>
}</block>
</if_expression>
</expression_statement>

      <expression_statement position="([301, 4] - [305, 5]">
        <if_expression position="([301, 4] - [305, 5]">if
          <binary_expression type="condition" position="([301, 7] - [301, 23]">
            <identifier type="left" position="([301, 7] - [301, 13]">format</identifier>
==
            <string_literal type="right" position="([301, 17] - [301, 23]">""</string_literal>
</binary_expression>

          <block type="consequence" position="([301, 24] - [305, 5]">{
            <let_declaration position="([302, 8] - [302, 37]">let
              <mutable_specifier position="([302, 12] - [302, 15]">mut</mutable_specifier>

              <identifier type="pattern" position="([302, 16] - [302, 22]">cursor</identifier>
=
              <call_expression type="value" position="([302, 25] - [302, 36]">
                <field_expression type="function" position="([302, 25] - [302, 34]">
                  <identifier type="value" position="([302, 25] - [302, 29]">tree</identifier>
.
                  <field_identifier type="field" position="([302, 30] - [302, 34]">walk</field_identifier>
</field_expression>

                <arguments type="arguments" position="([302, 34] - [302, 36]">()</arguments>
</call_expression>
;</let_declaration>

            <let_declaration position="([303, 8] - [303, 81]">let
              <identifier type="pattern" position="([303, 12] - [303, 20]">json_ast</identifier>
=
              <call_expression type="value" position="([303, 23] - [303, 80]">
                <identifier type="function" position="([303, 23] - [303, 35]">node_to_json</identifier>

                <arguments type="arguments" position="([303, 35] - [303, 80]">(
                  <call_expression position="([303, 36] - [303, 52]">
                    <field_expression type="function" position="([303, 36] - [303, 50]">
                      <identifier type="value" position="([303, 36] - [303, 40]">tree</identifier>
.
                      <field_identifier type="field" position="([303, 41] - [303, 50]">root_node</field_identifier>
</field_expression>

                    <arguments type="arguments" position="([303, 50] - [303, 52]">()</arguments>
</call_expression>
,
                  <reference_expression position="([303, 54] - [303, 65]">&amp;
                    <mutable_specifier position="([303, 55] - [303, 58]">mut</mutable_specifier>

                    <identifier type="value" position="([303, 59] - [303, 65]">cursor</identifier>
</reference_expression>
,
                  <reference_expression position="([303, 67] - [303, 79]">&amp;
                    <identifier type="value" position="([303, 68] - [303, 79]">source_code</identifier>
</reference_expression>
)</arguments>
</call_expression>
;</let_declaration>

            <expression_statement position="([304, 8] - [304, 73]">
              <macro_invocation position="([304, 8] - [304, 72]">
                <identifier type="macro" position="([304, 8] - [304, 15]">println</identifier>
!
                <token_tree position="([304, 16] - [304, 72]">(
                  <string_literal position="([304, 17] - [304, 21]">""</string_literal>

                  <identifier position="([304, 23] - [304, 33]">serde_json</identifier>

                  <identifier position="([304, 35] - [304, 51]">to_string_pretty</identifier>

                  <token_tree position="([304, 51] - [304, 62]">(
                    <identifier position="([304, 53] - [304, 61]">json_ast</identifier>
)</token_tree>

                  <identifier position="([304, 63] - [304, 69]">unwrap</identifier>

                  <token_tree position="([304, 69] - [304, 71]">()</token_tree>
)</token_tree>
</macro_invocation>
;</expression_statement>
}</block>
</if_expression>
</expression_statement>

      <let_declaration position="([307, 4] - [307, 62]">let
        <mutable_specifier position="([307, 8] - [307, 11]">mut</mutable_specifier>

        <identifier type="pattern" position="([307, 12] - [307, 23]">first_error</identifier>
:
        <generic_type type="type" position="([307, 25] - [307, 54]">
          <type_identifier type="type" position="([307, 25] - [307, 31]">Option</type_identifier>

          <type_arguments type="type_arguments" position="([307, 31] - [307, 54]">&lt;
            <generic_type position="([307, 32] - [307, 53]">
              <scoped_type_identifier type="type" position="([307, 32] - [307, 49]">
                <identifier type="path" position="([307, 32] - [307, 43]">tree_sitter</identifier>
::
                <type_identifier type="name" position="([307, 45] - [307, 49]">Node</type_identifier>
</scoped_type_identifier>

              <type_arguments type="type_arguments" position="([307, 49] - [307, 53]">&lt;
                <lifetime position="([307, 50] - [307, 52]">'
                  <identifier position="([307, 51] - [307, 52]">_</identifier>
</lifetime>
&gt;</type_arguments>
</generic_type>
&gt;</type_arguments>
</generic_type>
=
        <identifier type="value" position="([307, 57] - [307, 61]">None</identifier>
;</let_declaration>

      <expression_statement position="([308, 4] - [322, 5]">
        <loop_expression position="([308, 4] - [322, 5]">loop
          <block type="body" position="([308, 9] - [322, 5]">{
            <let_declaration position="([309, 8] - [309, 56]">let
              <identifier type="pattern" position="([309, 12] - [309, 16]">node</identifier>
:
              <generic_type type="type" position="([309, 18] - [309, 39]">
                <scoped_type_identifier type="type" position="([309, 18] - [309, 35]">
                  <identifier type="path" position="([309, 18] - [309, 29]">tree_sitter</identifier>
::
                  <type_identifier type="name" position="([309, 31] - [309, 35]">Node</type_identifier>
</scoped_type_identifier>

                <type_arguments type="type_arguments" position="([309, 35] - [309, 39]">&lt;
                  <lifetime position="([309, 36] - [309, 38]">'
                    <identifier position="([309, 37] - [309, 38]">_</identifier>
</lifetime>
&gt;</type_arguments>
</generic_type>
=
              <call_expression type="value" position="([309, 42] - [309, 55]">
                <field_expression type="function" position="([309, 42] - [309, 53]">
                  <identifier type="value" position="([309, 42] - [309, 48]">cursor</identifier>
.
                  <field_identifier type="field" position="([309, 49] - [309, 53]">node</field_identifier>
</field_expression>

                <arguments type="arguments" position="([309, 53] - [309, 55]">()</arguments>
</call_expression>
;</let_declaration>

            <expression_statement position="([310, 8] - [321, 9]">
              <if_expression position="([310, 8] - [321, 9]">if
                <call_expression type="condition" position="([310, 11] - [310, 27]">
                  <field_expression type="function" position="([310, 11] - [310, 25]">
                    <identifier type="value" position="([310, 11] - [310, 15]">node</identifier>
.
                    <field_identifier type="field" position="([310, 16] - [310, 25]">has_error</field_identifier>
</field_expression>

                  <arguments type="arguments" position="([310, 25] - [310, 27]">()</arguments>
</call_expression>

                <block type="consequence" position="([310, 28] - [319, 9]">{
                  <expression_statement position="([311, 12] - [318, 13]">
                    <if_expression position="([311, 12] - [318, 13]">if
                      <binary_expression type="condition" position="([311, 15] - [311, 51]">
                        <call_expression type="left" position="([311, 15] - [311, 30]">
                          <field_expression type="function" position="([311, 15] - [311, 28]">
                            <identifier type="value" position="([311, 15] - [311, 19]">node</identifier>
.
                            <field_identifier type="field" position="([311, 20] - [311, 28]">is_error</field_identifier>
</field_expression>

                          <arguments type="arguments" position="([311, 28] - [311, 30]">()</arguments>
</call_expression>
||
                        <call_expression type="right" position="([311, 34] - [311, 51]">
                          <field_expression type="function" position="([311, 34] - [311, 49]">
                            <identifier type="value" position="([311, 34] - [311, 38]">node</identifier>
.
                            <field_identifier type="field" position="([311, 39] - [311, 49]">is_missing</field_identifier>
</field_expression>

                          <arguments type="arguments" position="([311, 49] - [311, 51]">()</arguments>
</call_expression>
</binary_expression>

                      <block type="consequence" position="([311, 52] - [314, 13]">{
                        <expression_statement position="([312, 16] - [312, 41]">
                          <assignment_expression position="([312, 16] - [312, 40]">
                            <identifier type="left" position="([312, 16] - [312, 27]">first_error</identifier>
=
                            <call_expression type="right" position="([312, 30] - [312, 40]">
                              <identifier type="function" position="([312, 30] - [312, 34]">Some</identifier>

                              <arguments type="arguments" position="([312, 34] - [312, 40]">(
                                <identifier position="([312, 35] - [312, 39]">node</identifier>
)</arguments>
</call_expression>
</assignment_expression>
;</expression_statement>

                        <expression_statement position="([313, 16] - [313, 22]">
                          <break_expression position="([313, 16] - [313, 21]">break</break_expression>
;</expression_statement>
}</block>

                      <else_clause type="alternative" position="([314, 14] - [318, 13]">else
                        <block position="([314, 19] - [318, 13]">{
                          <expression_statement position="([315, 16] - [317, 17]">
                            <if_expression position="([315, 16] - [317, 17]">if
                              <unary_expression type="condition" position="([315, 19] - [315, 45]">!
                                <call_expression position="([315, 20] - [315, 45]">
                                  <field_expression type="function" position="([315, 20] - [315, 43]">
                                    <identifier type="value" position="([315, 20] - [315, 26]">cursor</identifier>
.
                                    <field_identifier type="field" position="([315, 27] - [315, 43]">goto_first_child</field_identifier>
</field_expression>

                                  <arguments type="arguments" position="([315, 43] - [315, 45]">()</arguments>
</call_expression>
</unary_expression>

                              <block type="consequence" position="([315, 46] - [317, 17]">{
                                <expression_statement position="([316, 20] - [316, 26]">
                                  <break_expression position="([316, 20] - [316, 25]">break</break_expression>
;</expression_statement>
}</block>
</if_expression>
</expression_statement>
}</block>
</else_clause>
</if_expression>
</expression_statement>
}</block>

                <else_clause type="alternative" position="([319, 10] - [321, 9]">else
                  <if_expression position="([319, 15] - [321, 9]">if
                    <unary_expression type="condition" position="([319, 18] - [319, 45]">!
                      <call_expression position="([319, 19] - [319, 45]">
                        <field_expression type="function" position="([319, 19] - [319, 43]">
                          <identifier type="value" position="([319, 19] - [319, 25]">cursor</identifier>
.
                          <field_identifier type="field" position="([319, 26] - [319, 43]">goto_next_sibling</field_identifier>
</field_expression>

                        <arguments type="arguments" position="([319, 43] - [319, 45]">()</arguments>
</call_expression>
</unary_expression>

                    <block type="consequence" position="([319, 46] - [321, 9]">{
                      <expression_statement position="([320, 12] - [320, 18]">
                        <break_expression position="([320, 12] - [320, 17]">break</break_expression>
;</expression_statement>
}</block>
</if_expression>
</else_clause>
</if_expression>
</expression_statement>
}</block>
</loop_expression>
</expression_statement>

      <expression_statement position="([324, 4] - [366, 5]">
        <if_expression position="([324, 4] - [366, 5]">if
          <call_expression type="condition" position="([324, 7] - [324, 28]">
            <field_expression type="function" position="([324, 7] - [324, 26]">
              <identifier type="value" position="([324, 7] - [324, 18]">first_error</identifier>
.
              <field_identifier type="field" position="([324, 19] - [324, 26]">is_some</field_identifier>
</field_expression>

            <arguments type="arguments" position="([324, 26] - [324, 28]">()</arguments>
</call_expression>

          <block type="consequence" position="([324, 29] - [366, 5]">{
            <expression_statement position="([325, 8] - [365, 9]">
              <if_expression position="([325, 8] - [365, 9]">if
                <let_condition type="condition" position="([325, 11] - [325, 39]">let
                  <tuple_struct_pattern type="pattern" position="([325, 15] - [325, 25]">
                    <identifier type="type" position="([325, 15] - [325, 19]">Some</identifier>
(
                    <identifier position="([325, 20] - [325, 24]">node</identifier>
)</tuple_struct_pattern>
=
                  <identifier type="value" position="([325, 28] - [325, 39]">first_error</identifier>
</let_condition>

                <block type="consequence" position="([325, 40] - [365, 9]">{
                  <let_declaration position="([326, 12] - [326, 46]">let
                    <identifier type="pattern" position="([326, 16] - [326, 21]">start</identifier>
=
                    <call_expression type="value" position="([326, 24] - [326, 45]">
                      <field_expression type="function" position="([326, 24] - [326, 43]">
                        <identifier type="value" position="([326, 24] - [326, 28]">node</identifier>
.
                        <field_identifier type="field" position="([326, 29] - [326, 43]">start_position</field_identifier>
</field_expression>

                      <arguments type="arguments" position="([326, 43] - [326, 45]">()</arguments>
</call_expression>
;</let_declaration>

                  <let_declaration position="([327, 12] - [327, 42]">let
                    <identifier type="pattern" position="([327, 16] - [327, 19]">end</identifier>
=
                    <call_expression type="value" position="([327, 22] - [327, 41]">
                      <field_expression type="function" position="([327, 22] - [327, 39]">
                        <identifier type="value" position="([327, 22] - [327, 26]">node</identifier>
.
                        <field_identifier type="field" position="([327, 27] - [327, 39]">end_position</field_identifier>
</field_expression>

                      <arguments type="arguments" position="([327, 39] - [327, 41]">()</arguments>
</call_expression>
;</let_declaration>

                  <expression_statement position="([328, 12] - [330, 15]">
                    <call_expression position="([328, 12] - [330, 14]">
                      <field_expression type="function" position="([328, 12] - [328, 53]">
                        <macro_invocation type="value" position="([328, 12] - [328, 38]">
                          <identifier type="macro" position="([328, 12] - [328, 17]">write</identifier>
!
                          <token_tree position="([328, 18] - [328, 38]">(
                            <mutable_specifier position="([328, 20] - [328, 23]">mut</mutable_specifier>

                            <identifier position="([328, 24] - [328, 30]">stdout</identifier>

                            <string_literal position="([328, 32] - [328, 37]">"
                              <escape_sequence position="([328, 33] - [328, 35]">\t</escape_sequence>
"</string_literal>
)</token_tree>
</macro_invocation>
.
                        <field_identifier type="field" position="([328, 39] - [328, 53]">unwrap_or_else</field_identifier>
</field_expression>

                      <arguments type="arguments" position="([328, 53] - [330, 14]">(
                        <closure_expression position="([328, 54] - [330, 13]">
                          <closure_parameters type="parameters" position="([328, 54] - [328, 70]">|
                            <parameter position="([328, 55] - [328, 69]">
                              <identifier type="pattern" position="([328, 55] - [328, 58]">err</identifier>
:
                              <scoped_type_identifier type="type" position="([328, 60] - [328, 69]">
                                <identifier type="path" position="([328, 60] - [328, 62]">io</identifier>
::
                                <type_identifier type="name" position="([328, 64] - [328, 69]">Error</type_identifier>
</scoped_type_identifier>
</parameter>
|</closure_parameters>

                          <block type="body" position="([328, 71] - [330, 13]">{
                            <expression_statement position="([329, 16] - [329, 55]">
                              <macro_invocation position="([329, 16] - [329, 54]">
                                <identifier type="macro" position="([329, 16] - [329, 26]">error_exit</identifier>
!
                                <token_tree position="([329, 27] - [329, 54]">(
                                  <string_literal position="([329, 28] - [329, 48]">""</string_literal>

                                  <identifier position="([329, 50] - [329, 53]">err</identifier>
)</token_tree>
</macro_invocation>
;</expression_statement>
}</block>
</closure_expression>
)</arguments>
</call_expression>
;</expression_statement>

                  <expression_statement position="([331, 12] - [352, 13]">
                    <if_expression position="([331, 12] - [352, 13]">if
                      <call_expression type="condition" position="([331, 15] - [331, 32]">
                        <field_expression type="function" position="([331, 15] - [331, 30]">
                          <identifier type="value" position="([331, 15] - [331, 19]">node</identifier>
.
                          <field_identifier type="field" position="([331, 20] - [331, 30]">is_missing</field_identifier>
</field_expression>

                        <arguments type="arguments" position="([331, 30] - [331, 32]">()</arguments>
</call_expression>

                      <block type="consequence" position="([331, 33] - [348, 13]">{
                        <expression_statement position="([332, 16] - [347, 17]">
                          <if_expression position="([332, 16] - [347, 17]">if
                            <call_expression type="condition" position="([332, 19] - [332, 34]">
                              <field_expression type="function" position="([332, 19] - [332, 32]">
                                <identifier type="value" position="([332, 19] - [332, 23]">node</identifier>
.
                                <field_identifier type="field" position="([332, 24] - [332, 32]">is_named</field_identifier>
</field_expression>

                              <arguments type="arguments" position="([332, 32] - [332, 34]">()</arguments>
</call_expression>

                            <block type="consequence" position="([332, 35] - [338, 17]">{
                              <expression_statement position="([333, 20] - [337, 22]">
                                <call_expression position="([333, 20] - [337, 21]">
                                  <field_expression type="function" position="([333, 20] - [333, 81]">
                                    <macro_invocation type="value" position="([333, 20] - [333, 66]">
                                      <identifier type="macro" position="([333, 20] - [333, 25]">write</identifier>
!
                                      <token_tree position="([333, 26] - [333, 66]">(
                                        <mutable_specifier position="([333, 28] - [333, 31]">mut</mutable_specifier>

                                        <identifier position="([333, 32] - [333, 38]">stdout</identifier>

                                        <string_literal position="([333, 40] - [333, 52]">""</string_literal>

                                        <identifier position="([333, 54] - [333, 58]">node</identifier>

                                        <identifier position="([333, 59] - [333, 63]">kind</identifier>

                                        <token_tree position="([333, 63] - [333, 65]">()</token_tree>
)</token_tree>
</macro_invocation>
.
                                    <field_identifier type="field" position="([333, 67] - [333, 81]">unwrap_or_else</field_identifier>
</field_expression>

                                  <arguments type="arguments" position="([333, 81] - [337, 21]">(
                                    <closure_expression position="([334, 24] - [336, 25]">
                                      <closure_parameters type="parameters" position="([334, 24] - [334, 40]">|
                                        <parameter position="([334, 25] - [334, 39]">
                                          <identifier type="pattern" position="([334, 25] - [334, 28]">err</identifier>
:
                                          <scoped_type_identifier type="type" position="([334, 30] - [334, 39]">
                                            <identifier type="path" position="([334, 30] - [334, 32]">io</identifier>
::
                                            <type_identifier type="name" position="([334, 34] - [334, 39]">Error</type_identifier>
</scoped_type_identifier>
</parameter>
|</closure_parameters>

                                      <block type="body" position="([334, 41] - [336, 25]">{
                                        <expression_statement position="([335, 28] - [335, 67]">
                                          <macro_invocation position="([335, 28] - [335, 66]">
                                            <identifier type="macro" position="([335, 28] - [335, 38]">error_exit</identifier>
!
                                            <token_tree position="([335, 39] - [335, 66]">(
                                              <string_literal position="([335, 40] - [335, 60]">""</string_literal>

                                              <identifier position="([335, 62] - [335, 65]">err</identifier>
)</token_tree>
</macro_invocation>
;</expression_statement>
}</block>
</closure_expression>
,)</arguments>
</call_expression>
;</expression_statement>
}</block>

                            <else_clause type="alternative" position="([338, 18] - [347, 17]">else
                              <block position="([338, 23] - [347, 17]">{
                                <expression_statement position="([339, 20] - [346, 23]">
                                  <call_expression position="([339, 20] - [346, 22]">
                                    <field_expression type="function" position="([339, 20] - [344, 35]">
                                      <macro_invocation type="value" position="([339, 20] - [343, 21]">
                                        <identifier type="macro" position="([339, 20] - [339, 25]">write</identifier>
!
                                        <token_tree position="([339, 26] - [343, 21]">(
                                          <mutable_specifier position="([340, 25] - [340, 28]">mut</mutable_specifier>

                                          <identifier position="([340, 29] - [340, 35]">stdout</identifier>

                                          <string_literal position="([341, 24] - [341, 40]">"
                                            <escape_sequence position="([341, 33] - [341, 35]">\"</escape_sequence>

                                            <escape_sequence position="([341, 37] - [341, 39]">\"</escape_sequence>
"</string_literal>

                                          <identifier position="([342, 24] - [342, 28]">node</identifier>

                                          <identifier position="([342, 29] - [342, 33]">kind</identifier>

                                          <token_tree position="([342, 33] - [342, 35]">()</token_tree>

                                          <identifier position="([342, 36] - [342, 43]">replace</identifier>

                                          <token_tree position="([342, 43] - [342, 56]">(
                                            <string_literal position="([342, 44] - [342, 48]">"
                                              <escape_sequence position="([342, 45] - [342, 47]">\n</escape_sequence>
"</string_literal>

                                            <string_literal position="([342, 50] - [342, 55]">"
                                              <escape_sequence position="([342, 51] - [342, 53]">\\</escape_sequence>
"</string_literal>
)</token_tree>
)</token_tree>
</macro_invocation>
.
                                      <field_identifier type="field" position="([344, 21] - [344, 35]">unwrap_or_else</field_identifier>
</field_expression>

                                    <arguments type="arguments" position="([344, 35] - [346, 22]">(
                                      <closure_expression position="([344, 36] - [346, 21]">
                                        <closure_parameters type="parameters" position="([344, 36] - [344, 41]">|
                                          <identifier position="([344, 37] - [344, 40]">err</identifier>
|</closure_parameters>

                                        <block type="body" position="([344, 42] - [346, 21]">{
                                          <expression_statement position="([345, 24] - [345, 63]">
                                            <macro_invocation position="([345, 24] - [345, 62]">
                                              <identifier type="macro" position="([345, 24] - [345, 34]">error_exit</identifier>
!
                                              <token_tree position="([345, 35] - [345, 62]">(
                                                <string_literal position="([345, 36] - [345, 56]">""</string_literal>

                                                <identifier position="([345, 58] - [345, 61]">err</identifier>
)</token_tree>
</macro_invocation>
;</expression_statement>
}</block>
</closure_expression>
)</arguments>
</call_expression>
;</expression_statement>
}</block>
</else_clause>
</if_expression>
</expression_statement>
}</block>

                      <else_clause type="alternative" position="([348, 14] - [352, 13]">else
                        <block position="([348, 19] - [352, 13]">{
                          <expression_statement position="([349, 16] - [351, 19]">
                            <call_expression position="([349, 16] - [351, 18]">
                              <field_expression type="function" position="([349, 16] - [349, 69]">
                                <macro_invocation type="value" position="([349, 16] - [349, 54]">
                                  <identifier type="macro" position="([349, 16] - [349, 21]">write</identifier>
!
                                  <token_tree position="([349, 22] - [349, 54]">(
                                    <mutable_specifier position="([349, 24] - [349, 27]">mut</mutable_specifier>

                                    <identifier position="([349, 28] - [349, 34]">stdout</identifier>

                                    <string_literal position="([349, 36] - [349, 40]">""</string_literal>

                                    <identifier position="([349, 42] - [349, 46]">node</identifier>

                                    <identifier position="([349, 47] - [349, 51]">kind</identifier>

                                    <token_tree position="([349, 51] - [349, 53]">()</token_tree>
)</token_tree>
</macro_invocation>
.
                                <field_identifier type="field" position="([349, 55] - [349, 69]">unwrap_or_else</field_identifier>
</field_expression>

                              <arguments type="arguments" position="([349, 69] - [351, 18]">(
                                <closure_expression position="([349, 70] - [351, 17]">
                                  <closure_parameters type="parameters" position="([349, 70] - [349, 75]">|
                                    <identifier position="([349, 71] - [349, 74]">err</identifier>
|</closure_parameters>

                                  <block type="body" position="([349, 76] - [351, 17]">{
                                    <expression_statement position="([350, 20] - [350, 59]">
                                      <macro_invocation position="([350, 20] - [350, 58]">
                                        <identifier type="macro" position="([350, 20] - [350, 30]">error_exit</identifier>
!
                                        <token_tree position="([350, 31] - [350, 58]">(
                                          <string_literal position="([350, 32] - [350, 52]">""</string_literal>

                                          <identifier position="([350, 54] - [350, 57]">err</identifier>
)</token_tree>
</macro_invocation>
;</expression_statement>
}</block>
</closure_expression>
)</arguments>
</call_expression>
;</expression_statement>
}</block>
</else_clause>
</if_expression>
</expression_statement>

                  <expression_statement position="([353, 12] - [360, 15]">
                    <call_expression position="([353, 12] - [360, 14]">
                      <field_expression type="function" position="([353, 12] - [358, 27]">
                        <macro_invocation type="value" position="([353, 12] - [357, 13]">
                          <identifier type="macro" position="([353, 12] - [353, 17]">write</identifier>
!
                          <token_tree position="([353, 18] - [357, 13]">(
                            <mutable_specifier position="([354, 17] - [354, 20]">mut</mutable_specifier>

                            <identifier position="([354, 21] - [354, 27]">stdout</identifier>

                            <string_literal position="([355, 16] - [355, 39]">""</string_literal>

                            <identifier position="([356, 16] - [356, 21]">start</identifier>

                            <identifier position="([356, 22] - [356, 25]">row</identifier>

                            <identifier position="([356, 27] - [356, 32]">start</identifier>

                            <identifier position="([356, 33] - [356, 39]">column</identifier>

                            <identifier position="([356, 41] - [356, 44]">end</identifier>

                            <identifier position="([356, 45] - [356, 48]">row</identifier>

                            <identifier position="([356, 50] - [356, 53]">end</identifier>

                            <identifier position="([356, 54] - [356, 60]">column</identifier>
)</token_tree>
</macro_invocation>
.
                        <field_identifier type="field" position="([358, 13] - [358, 27]">unwrap_or_else</field_identifier>
</field_expression>

                      <arguments type="arguments" position="([358, 27] - [360, 14]">(
                        <closure_expression position="([358, 28] - [360, 13]">
                          <closure_parameters type="parameters" position="([358, 28] - [358, 33]">|
                            <identifier position="([358, 29] - [358, 32]">err</identifier>
|</closure_parameters>

                          <block type="body" position="([358, 34] - [360, 13]">{
                            <expression_statement position="([359, 16] - [359, 55]">
                              <macro_invocation position="([359, 16] - [359, 54]">
                                <identifier type="macro" position="([359, 16] - [359, 26]">error_exit</identifier>
!
                                <token_tree position="([359, 27] - [359, 54]">(
                                  <string_literal position="([359, 28] - [359, 48]">""</string_literal>

                                  <identifier position="([359, 50] - [359, 53]">err</identifier>
)</token_tree>
</macro_invocation>
;</expression_statement>
}</block>
</closure_expression>
)</arguments>
</call_expression>
;</expression_statement>

                  <expression_statement position="([361, 12] - [363, 15]">
                    <call_expression position="([361, 12] - [363, 14]">
                      <field_expression type="function" position="([361, 12] - [361, 52]">
                        <macro_invocation type="value" position="([361, 12] - [361, 37]">
                          <identifier type="macro" position="([361, 12] - [361, 17]">write</identifier>
!
                          <token_tree position="([361, 18] - [361, 37]">(
                            <mutable_specifier position="([361, 20] - [361, 23]">mut</mutable_specifier>

                            <identifier position="([361, 24] - [361, 30]">stdout</identifier>

                            <string_literal position="([361, 32] - [361, 36]">"
                              <escape_sequence position="([361, 33] - [361, 35]">\n</escape_sequence>
"</string_literal>
)</token_tree>
</macro_invocation>
.
                        <field_identifier type="field" position="([361, 38] - [361, 52]">unwrap_or_else</field_identifier>
</field_expression>

                      <arguments type="arguments" position="([361, 52] - [363, 14]">(
                        <closure_expression position="([361, 53] - [363, 13]">
                          <closure_parameters type="parameters" position="([361, 53] - [361, 58]">|
                            <identifier position="([361, 54] - [361, 57]">err</identifier>
|</closure_parameters>

                          <block type="body" position="([361, 59] - [363, 13]">{
                            <expression_statement position="([362, 16] - [362, 55]">
                              <macro_invocation position="([362, 16] - [362, 54]">
                                <identifier type="macro" position="([362, 16] - [362, 26]">error_exit</identifier>
!
                                <token_tree position="([362, 27] - [362, 54]">(
                                  <string_literal position="([362, 28] - [362, 48]">""</string_literal>

                                  <identifier position="([362, 50] - [362, 53]">err</identifier>
)</token_tree>
</macro_invocation>
;</expression_statement>
}</block>
</closure_expression>
)</arguments>
</call_expression>
;</expression_statement>

                  <expression_statement position="([364, 12] - [364, 42]">
                    <macro_invocation position="([364, 12] - [364, 41]">
                      <identifier type="macro" position="([364, 12] - [364, 22]">error_exit</identifier>
!
                      <token_tree position="([364, 23] - [364, 41]">(
                        <string_literal position="([364, 24] - [364, 40]">""</string_literal>
)</token_tree>
</macro_invocation>
;</expression_statement>
}</block>
</if_expression>
</expression_statement>
}</block>
</if_expression>
</expression_statement>
}</block>
</function_item>
</source_file>

